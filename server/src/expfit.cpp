/**
 * メモ
 * m_：マトリクス，v_：ベクトル，cf_：係数
 */
#include "../include/expfit.h"

/**
 * @fn GSLの非線形最小二乗法で使うモーメント方程式の関数値ベクトル
 * @param gsl_vector* x 方程式のパラメータ
 * @param void* params 系や入力のパラメータ
 * @param gsl_vector* f 計算後の方程式の値を格納
 */
int MomentEq::expb_f (const gsl_vector *x, void *params, gsl_vector *f)
{
	unsigned int i;
	double *dG	= (double *) params;
	// std::vector<double> dG	= dynamic_cast< std::vector<double> &>(params);

	std::vector<double> cf_moment_eq =						// モーメント方程式 係数行列 15x21
	{
		0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		-1,-2*ZETA,1,-1*EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,-2,-4*ZETA,0,-2*EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	       	
		0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,-1,-2*ZETA,3,0,0,-1*EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,
		dG[1],0,0,0,-2,-4*ZETA,2,0,0,-2*EPSILON,0,0,0,0,0,0,0,0,0,0,0, 
		0,3*dG[1],0,0,0,-3,-6*ZETA,1,0,0,-3*EPSILON,0,0,0,0,0,0,0,0,0,0,
		0,0,6*dG[1],0,0,0,-4,-8*ZETA,0,0,0,-4*EPSILON,0,0,0,0,0,0,0,0,0,

		0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,-1,-2*ZETA,5,0,0,0,0,-1*EPSILON,0,0,0,0,0,
		0,0,0,dG[1],0,0,0,0,0,-2,-4*ZETA,4,0,0,0,0,-2*EPSILON,0,0,0,0,
		0,0,0,0,3*dG[1],0,0,0,0,0,-3,-6*ZETA,3,0,0,0,0,-3*EPSILON,0,0,0,
		dG[3],0,0,0,0,6*dG[1],0,0,0,0,0,-4,-8*ZETA,2,0,0,0,0,-4*EPSILON,0,0,
		0,5*dG[3],0,0,0,0,10*dG[1],0,0,0,0,0,-5,-10*ZETA,1,0,0,0,0,-5*EPSILON,0,
		0,0,15*dG[3],0,0,0,0,15*dG[1],0,0,0,0,0,-6,-12*ZETA,0,0,0,0,0,-6*EPSILON
	};

	// 求めるパラメータをセット	
	std::vector<double> param(NUM_OF_PARAM);	// (a, μ1, μ2, σ11, σ12, σ21, σ22, k1, k2, k3)
	for (i = 0; i < NUM_OF_PARAM; ++i)
		param[i] = gsl_vector_get(x, i);
	// モーメント方程式を計算
	std::vector<double> Eg(NUM_OF_MOMENT);
	MomentEq::getMomentFromParameter(param, Eg);
	// モーメント法手式の結果を保存するvector
	std::vector<double> v_result_moment_eq(NUM_OF_MOMENTEQ, 0.);
	// モーメント方程式を解く
	gsl_matrix_view m_cf_moment_eq		= gsl_matrix_view_array(&cf_moment_eq[0], NUM_OF_MOMENTEQ, NUM_OF_MOMENT);
	gsl_matrix_view m_moment			= gsl_matrix_view_array(&Eg[0], NUM_OF_MOMENT, 1);
	gsl_matrix_view m_result_moment_eq	= gsl_matrix_view_array(&v_result_moment_eq[0], NUM_OF_MOMENTEQ, 1);
	gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, &m_cf_moment_eq.matrix, &m_moment.matrix, 0.0, &m_result_moment_eq.matrix);
	// 計算結果を配列に保存
	std::vector<double> array_result_moment_eq(NUM_OF_MOMENTEQ);
	for (i=0; i<NUM_OF_MOMENTEQ; ++i) {
		array_result_moment_eq[i] = gsl_matrix_get(&m_result_moment_eq.matrix, i, 0);	// 先の行列計算の答えを配列にする
	}
	array_result_moment_eq[2]  += dG[1];
	array_result_moment_eq[7]  += dG[3];
	array_result_moment_eq[14] += dG[5];
	// 補正係数
	std::vector<double> k(NUM_OF_MOMENTEQ);
	k[0] = 1.26;	k[1] = 0.66;	k[2] = 1.35;	k[3] = 3.81;	k[4] = 2.53;	k[5] = 2.85;	k[6] = 5.16;	k[7] = 7.25;
	k[8] = 19.6;	k[9] = 11.5;	k[10] = 13.7;	k[11] = 18.3;	k[12] = 26.9;	k[13] = 27.9;	k[14] = 318.;
	// 補正係数を含めた結果をfに格納
	for (i = 0; i < NUM_OF_MOMENTEQ; ++i) {
		gsl_vector_set(f, i, 1./k[i]*array_result_moment_eq[i]);
	}

	return GSL_SUCCESS;
}


 /**
 * @fn GSLの非線形最小二乗法で使うモーメント方程式のヤコビアン
 * @param gsl_vector* x 方程式のパラメータ
 * @param void* params 系や入力のパラメータ
 * @param gsl_vector* f 計算後の方程式の値を格納
 */
int MomentEq::expb_df (const gsl_vector * x, void *params, gsl_matrix *J)
{
	unsigned int i, ii;
	double *dG	= static_cast<double*>(params);

	std::vector<double> cf_moment_eq =						// モーメント方程式 係数行列 15x21
	{
		0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		-1,-2*ZETA,1,-1*EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,-2,-4*ZETA,0,-2*EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	       	
		0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,-1,-2*ZETA,3,0,0,-1*EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,-2,-4*ZETA,2,0,0,-2*EPSILON,0,0,0,0,0,0,0,0,0,0,0,
		0,3*dG[1],0,0,0,-3,-6*ZETA,1,0,0,-3*EPSILON,0,0,0,0,0,0,0,0,0,0,
		0,0,6*dG[1],0,0,0,-4,-8*ZETA,0,0,0,-4*EPSILON,0,0,0,0,0,0,0,0,0,
	           
		0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,-1,-2*ZETA,5,0,0,0,0,-1*EPSILON,0,0,0,0,0,
		0,0,0,dG[1],0,0,0,0,0,-2,-4*ZETA,4,0,0,0,0,-2*EPSILON,0,0,0,0,
		0,0,0,0,3*dG[1],0,0,0,0,0,-3,-6*ZETA,3,0,0,0,0,-3*EPSILON,0,0,0,
		dG[3],0,0,0,0,6*dG[1],0,0,0,0,0,-4,-8*ZETA,2,0,0,0,0,-4*EPSILON,0,0,
		0,5*dG[3],0,0,0,0,10*dG[1],0,0,0,0,0,-5,-10*ZETA,1,0,0,0,0,-5*EPSILON,0,
		0,0,15*dG[3],0,0,0,0,15*dG[1],0,0,0,0,0,-6,-12*ZETA,0,0,0,0,0,-6*EPSILON
	};

	// 求めるパラメータをセット
	std::vector<double> param(NUM_OF_PARAM);	// (a, μ1, μ2, σ11, σ12, σ21, σ22, k1, k2, k3)
	for(i = 0; i < NUM_OF_PARAM; i++) {
	  param[i] = gsl_vector_get(x, i);
	}
	// ヤコビアンを計算
	std::vector< std::vector<double> > jacoby(NUM_OF_MOMENT, std::vector<double>(NUM_OF_PARAM, 0.));
	MomentEq::getJacobyFromParameter(param, jacoby);
	// モーメントのヤコビアンをベクトルに変換
	std::vector<double> v_jacoby_moment(210);
	for (i = 0; i < NUM_OF_MOMENT; i++) {
		for (ii = 0; ii < NUM_OF_PARAM; ii++) {
			v_jacoby_moment[NUM_OF_PARAM*i + ii] = jacoby[i][ii] ;
		}
	}
	// モーメント方程式のヤコビアンを計算
	std::vector<double> cf_jacoby_moment_eq(150, 0.);
	gsl_matrix_view m_cf_jacoby_moment_eq	= gsl_matrix_view_array(&cf_jacoby_moment_eq[0], NUM_OF_MOMENTEQ, NUM_OF_PARAM);
	gsl_matrix_view m_cf_moment_eq			= gsl_matrix_view_array(&cf_moment_eq[0], NUM_OF_MOMENTEQ, NUM_OF_MOMENT);
	gsl_matrix_view m_jacoby_moment			= gsl_matrix_view_array(&v_jacoby_moment[0], NUM_OF_MOMENT, NUM_OF_PARAM);
	gsl_blas_dgemm (CblasNoTrans, CblasNoTrans, 1.0, &m_cf_moment_eq.matrix, &m_jacoby_moment.matrix, 0.0, &m_cf_jacoby_moment_eq.matrix);
	// 補正係数
	std::vector<double> k(NUM_OF_MOMENTEQ);
	k[0] = 1.26;	k[1] = 0.66;	k[2] = 1.35;	k[3] = 3.81;	k[4] = 2.53;	k[5] = 2.85;	k[6] = 5.16;	k[7] = 7.25;
	k[8] = 19.6;	k[9] = 11.5;	k[10] = 13.7;	k[11] = 18.3;	k[12] = 26.9;	k[13] = 27.9;	k[14] = 318.;
	// 補正係数を含めた結果をjに格納
	for(i = 0; i < NUM_OF_MOMENTEQ; i++) {
		for(ii = 0; ii < 10; ii++) {
			gsl_matrix_set(J, i, ii, k[i]*gsl_matrix_get(&m_cf_jacoby_moment_eq.matrix,i,ii));
		}
	}

	return GSL_SUCCESS;
}

int MomentEq::expb_fdf (const gsl_vector *x, void *params, gsl_vector *f, gsl_matrix *J)
{
	expb_f(x, params, f);
	expb_df(x, params, J);
	
	return GSL_SUCCESS;
}

/**
 * @fn パラメータ値からモーメント値を得る
 * @param const std::vector<double> &p パラメータ値
 * @param const std::vector<double> &m モーメント値（領域確保済み）
 */
void MomentEq::getMomentFromParameter(const std::vector<double> &p, std::vector<double> &m)
{
	// ２次モーメント
	m[0] = (1 - p[0])*(pow(p[3],2) + pow(p[1],2)) + p[0]*pow(p[5],2);	// y_1^2
	// m[1] = (1 - p[0])/2*((p[7] + p[1]*p[2]) + (p[9] + p[1]*p[2])) + p[0]*p[8];	// y_1*y_2
	m[1] = 0.;	// y_1*y_2
	m[2] = (1 - p[0])*(pow(p[4],2) + pow(p[2],2)) + p[0]*pow(p[6],2);	// y_2^2

	// ４次モーメント
	m[3] = (1 - p[0])*(3*pow(p[3],4) + 6*pow(p[1],2)*pow(p[3],2) + pow(p[1],4)) + 3*p[0]*pow(p[5],4);	// y_1^4
	// m[4] = (1 - p[0])/2*((3*pow(p[3],2)*(p[7] + p[1]*p[2]) + pow(p[1],2)*(3*p[7] + p[1]*p[2]))
	// 	+ (3*pow(p[3],2)*(p[9] + p[1]*p[2]) + pow(p[1],2)*(3*p[9] + p[1]*p[2]))) + 3*p[0]*pow(p[5],2)*p[8];	// y_1^3*y_2
	m[4] = 0.;	// y_1^3*y_2	
	m[5] = (1 - p[0])/2*((pow(p[3],2)*pow(p[4],2) + pow(p[1],2)*pow(p[4],2) + pow(p[2],2)*pow(p[3],2) + 2*pow(p[7],2) + 4*p[7]*p[1]*p[2] + pow(p[1],2)*pow(p[2],2))
		+ (pow(p[3],2)*pow(p[4],2) + pow(p[1],2)*pow(p[4],2) + pow(p[2],2)*pow(p[3],2) + 2*pow(p[9],2) + 4*p[9]*p[1]*p[2] + pow(p[1],2)*pow(p[2],2)))
		+ p[0]*(pow(p[5],2)*pow(p[6],2) + 2*pow(p[8],2));	// y_1^2*y_2^2
	m[6] = (1 - p[0])/2*((3*pow(p[4],2)*(p[7] + p[1]*p[2]) + pow(p[2],2)*(3*p[7] + p[1]*p[2]))
		+ (3*pow(p[4],2)*(p[9] + p[1]*p[2]) + pow(p[2],2)*(3*p[9] + p[1]*p[2])))
		+ 3*p[0]*pow(p[6],2)*p[8];	// y_1*y_2^3
	m[7] = (1 - p[0])*(3*pow(p[4],4) + 6*pow(p[2],2)*pow(p[4],2) + pow(p[2],4)) + 3*p[0]*pow(p[6],4);	// y_2^4
	
	// ６次モーメント
	m[8] = (1 - p[0])*(15*pow(p[3],6) + 45*pow(p[3],4)*pow(p[1],2) + 15*pow(p[3],2)*pow(p[1],4) + pow(p[1],6)) + 15*p[0]*pow(p[5],6);						// y_1^6
	// m[9] = (1 - p[0])/2*((15*pow(p[3],4)*(p[7] + p[1]*p[2]) + pow(p[1],5)*p[2] + 5*pow(p[1],4)*p[7] + 10*pow(p[1],3)*p[2]*pow(p[3],2) + 30*p[7]*pow(p[1],2)*pow(p[3],2))
	// 	+ (15*pow(p[3],4)*(p[9] + p[1]*p[2]) + pow(p[1],5)*p[2] + 5*pow(p[1],4)*p[9] + 10*pow(p[1],3)*p[2]*pow(p[3],2) + 30*p[9]*pow(p[1],2)*pow(p[3],2)))
	// 	+ 15*p[0]*pow(p[5],4)*p[8];	// y_1^5*y_2
	m[9] = 0.;	// y_1^5*y_2
	m[10] = (1 - p[0])/2*((3*pow(p[3],4)*pow(p[4],2) + 12*pow(p[3]*p[7],2)+ 3*pow(p[2],2)*pow(p[3],4) + 6*pow(p[1]*p[2]*p[3],2) + pow(p[1],4)*pow(p[2],2) + 24*p[1]*p[2]*pow(p[3],2)*p[7]
		+ 8*pow(p[1],3)*p[2]*p[7] + 6*pow(p[1]*p[3]*p[4],2) + 12*pow(p[1]*p[7],2) + pow(p[1],4)*pow(p[4],2))
		+ (3*pow(p[3],4)*pow(p[4],2) + 12*pow(p[3]*p[9],2)+ 3*pow(p[2],2)*pow(p[3],4) + 6*pow(p[1]*p[2]*p[3],2) + pow(p[1],4)*pow(p[2],2) + 24*p[1]*p[2]*pow(p[3],2)*p[9]
		+ 8*pow(p[1],3)*p[2]*p[9] + 6*pow(p[1]*p[3]*p[4],2) + 12*pow(p[1]*p[9],2) + pow(p[1],4)*pow(p[4],2)))
		+ 3*p[0]*(pow(p[5],4)*pow(p[6],2) + 4*pow(p[8],2)*pow(p[5],2));	// y_1^4*y_2^2
	m[11] = (1 - p[0])/2*((6*pow((p[7] + p[1]*p[2]),3) + 9*p[7]*(pow(p[3]*p[4],2) + pow(p[1]*p[4],2) + pow(p[2]*p[3],2) - pow(p[1]*p[2],2)) + p[1]*p[2]*(9*pow(p[3]*p[4],2)
		+ 3*pow(p[1]*p[4],2) + 3*pow(p[2]*p[3],2) - 5*pow(p[1]*p[2],2)))
		+ (6*pow((p[9] + p[1]*p[2]),3) + 9*p[9]*(pow(p[3]*p[4],2) + pow(p[1]*p[4],2) + pow(p[2]*p[3],2) - pow(p[1]*p[2],2)) + p[1]*p[2]*(9*pow(p[3]*p[4],2)
		+ 3*pow(p[1]*p[4],2) + 3*pow(p[2]*p[3],2) - 5*pow(p[1]*p[2],2))))
		+ p[0]*(6*pow(p[8],3) + 9*p[8]*pow(p[5]*p[6],2));	// y_1^3*y_2^3
	m[12] = (1 - p[0])/2*((3*(pow(p[4],4)*pow(p[3],2) + 12*pow(p[4]*p[7],2) + 3*pow(p[1],2)*pow(p[4],4) + 6*pow(p[1]*p[2]*p[4],2) + pow(p[2],4)*pow(p[1],2)) + 24*p[1]*p[2]*pow(p[4],2)*p[7]
		+ 8*pow(p[2],3)*p[1]*p[7] + 6*pow(p[2]*p[3]*p[4],2) + 12*pow(p[2]*p[7],2)+ pow(p[2],4)*pow(p[3],2))
		+ (3*(pow(p[4],4)*pow(p[3],2) + 12*pow(p[4]*p[9],2) + 3*pow(p[1],2)*pow(p[4],4) + 6*pow(p[1]*p[2]*p[4],2) + pow(p[2],4)*pow(p[1],2)) + 24*p[1]*p[2]*pow(p[4],2)*p[9]
		+ 8*pow(p[2],3)*p[1]*p[9] + 6*pow(p[2]*p[3]*p[4],2) + 12*pow(p[2]*p[9],2)+ pow(p[2],4)*pow(p[3],2)))
		+ 3*p[0]*(pow(p[6],4)*pow(p[5],2) + 4*pow(p[8],2)*pow(p[6],2));	// y_1^2*y_2^4
	m[13] = (1 - p[0])/2*((15*pow(p[4],4)*(p[7] + p[1]*p[2]) + pow(p[2],5)*p[1] + 5*pow(p[2],4)*p[7] + 10*pow(p[2],3)*p[1]*pow(p[4],2) + 30*p[7]*pow(p[2],2)*pow(p[4],2))
		+ (15*pow(p[4],4)*(p[9] + p[1]*p[2]) + pow(p[2],5)*p[1] + 5*pow(p[2],4)*p[9] + 10*pow(p[2],3)*p[1]*pow(p[4],2) + 30*p[9]*pow(p[2],2)*pow(p[4],2)))
		+ 15*p[0]*pow(p[6],4)*p[8];	// y_1*y_2^5
	m[14] = (1 - p[0])*(15*pow(p[4],6) + 45*pow(p[4],4)*pow(p[2],2) + 15*pow(p[4],2)*pow(p[2],4) + pow(p[2],6))
		+ 15*p[0]*pow(p[6],6);	// y_2^6
	
	//8次モーメント
	m[15] = (1 - p[0])*(pow(p[1],8) + 28*pow(p[3],2)*pow(p[1],6) + 210*pow(p[3]*p[1],4) + 420*pow(p[3],6)*pow(p[1],2) + 105*pow(p[3],8))
		+ 105*p[0]*pow(p[5],8);	// y_1^8

	m[16] = (1 - p[0])/2*((pow(p[1],7)*p[2] + 21*pow(p[3],2)*pow(p[1],5)*p[2] + 105*pow(p[3],4)*pow(p[1],3)*p[2] + 105*pow(p[3],6)*p[1]*p[2] + p[7]*(7*pow(p[1],6)
		+ 105*pow(p[3],2)*pow(p[1],4)+ 315*pow(p[3],4)*pow(p[1],2) + 105*pow(p[3],6)))
		+ (pow(p[1],7)*p[2] + 21*pow(p[3],2)*pow(p[1],5)*p[2] + 105*pow(p[3],4)*pow(p[1],3)*p[2] + 105*pow(p[3],6)*p[1]*p[2] + p[9]*(7*pow(p[1],6)
		+ 105*pow(p[3],2)*pow(p[1],4)+ 315*pow(p[3],4)*pow(p[1],2) + 105*pow(p[3],6))))
		+ 105*p[0]*p[8]*pow(p[5],6);	// y_1^7*y_2
	
	m[17] = (1 - p[0])/2*((pow(p[1]*p[1]*p[1]*p[2],2) + 15*pow(p[1]*p[1]*p[2]*p[3],2) + 45*pow(p[1]*p[2]*p[3]*p[3],2) + 15*pow(p[2]*p[3]*p[3]*p[3],2) + 12*p[7]*pow(p[1],5)*p[2]
		+ 120*p[7]*pow(p[1],3)*p[2]*pow(p[3],2) + 180*p[7]*p[1]*p[2]*pow(p[3],4) + pow(p[1]*p[1]*p[1]*p[4],2) + 15*pow(p[1]*p[1]*p[3]*p[4],2) + 30*pow(p[7]*p[1]*p[1],2)
		+ 45*pow(p[1]*p[3]*p[3]*p[4],2) + 180*pow(p[7]*p[1]*p[3],2) + 15*pow(p[3]*p[3]*p[3]*p[4],2) + 90*pow(p[7]*p[3]*p[3],2))
		+ (pow(p[1]*p[1]*p[1]*p[2],2) + 15*pow(p[1]*p[1]*p[2]*p[3],2) + 45*pow(p[1]*p[2]*p[3]*p[3],2) + 15*pow(p[2]*p[3]*p[3]*p[3],2) + 12*p[9]*pow(p[1],5)*p[2]
		+ 120*p[9]*pow(p[1],3)*p[2]*pow(p[3],2) + 180*p[9]*p[1]*p[2]*pow(p[3],4) + pow(p[1]*p[1]*p[1]*p[4],2) + 15*pow(p[1]*p[1]*p[3]*p[4],2) + 30*pow(p[9]*p[1]*p[1],2)
		+ 45*pow(p[1]*p[3]*p[3]*p[4],2) + 180*pow(p[9]*p[1]*p[3],2) + 15*pow(p[3]*p[3]*p[3]*p[4],2) + 90*pow(p[9]*p[3]*p[3],2)))
		+ 15*p[0]*(pow(p[5]*p[5]*p[5]*p[6],2) + 6*pow(p[8]*p[5]*p[5],2));	// y_1^6y_2^2
	
	m[18] = (1 - p[0])/2*(pow(p[1],5)*pow(p[2],3) + 10*pow(p[1]*p[2],3)*pow(p[3],2) + 45*p[1]*pow(p[2],3)*pow(p[3],4) + 15*p[7]*pow(p[1]*p[1]*p[2],2)
		+ 90*p[7]*pow(p[1]*p[2]*p[3],2) + 45*p[7]*pow(p[2]*p[3]*p[3],2) + 3*pow(p[1],5)*p[2]*pow(p[4],2) + 30*pow(p[1],3)*p[2]*pow(p[3]*p[4],2)
		+ 60*pow(p[7],2)*pow(p[1],3)*p[2] + 45*p[1]*p[2]*pow(p[3]*p[3]*p[4],2)+ 180*pow(p[7],2)*p[1]*p[2]*pow(p[3],2) + 15*p[7]*pow(p[1]*p[1]*p[4],2)
		+ 90*p[7]*pow(p[1]*p[3]*p[4],2) + 60*pow(p[7],3)*pow(p[1],2) + 45*p[7]*pow(p[3]*p[3]*p[4],2) + 60*pow(p[7],3)*pow(p[3],2)
		+ (pow(p[1],5)*pow(p[2],3) + 10*pow(p[1]*p[2],3)*pow(p[3],2) + 45*p[1]*pow(p[2],3)*pow(p[3],4) + 15*p[9]*pow(p[1]*p[1]*p[2],2)
		+ 90*p[9]*pow(p[1]*p[2]*p[3],2) + 45*p[9]*pow(p[2]*p[3]*p[3],2) + 3*pow(p[1],5)*p[2]*pow(p[4],2) + 30*pow(p[1],3)*p[2]*pow(p[3]*p[4],2)
		+ 60*pow(p[9],2)*pow(p[1],3)*p[2] + 45*p[1]*p[2]*pow(p[3]*p[3]*p[4],2)+ 180*pow(p[9],2)*p[1]*p[2]*pow(p[3],2) + 15*p[9]*pow(p[1]*p[1]*p[4],2)
		+ 90*p[9]*pow(p[1]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[1],2) + 45*p[9]*pow(p[3]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[3],2)))
		+ p[0]*(45*p[8]*pow(p[5]*p[5]*p[6],2) + 60*pow(p[8],3)*pow(p[5],2));	// y_1^5*y_2^3
	
	m[19] = (1 - p[0])/2*(pow(p[1]*p[2],4) + 6*pow(p[1]*p[2]*p[2]*p[3],2) + 3*pow(p[2]*p[3],4) + 16*p[7]*pow(p[1]*p[2],3) + 48*p[7]*p[1]*pow(p[2],3)*pow(p[3],2)
		+ 6*pow(p[1]*p[1]*p[2]*p[4],2) + 36*pow(p[1]*p[2]*p[3]*p[4],2) + 72*pow(p[7]*p[1]*p[2],2) + 18*pow(p[2]*p[3]*p[3]*p[4],2) + 72*pow(p[7]*p[2]*p[3],2)
		+ 48*p[7]*pow(p[1],3)*p[2]*pow(p[4],2) + 144*p[7]*p[1]*p[2]*pow(p[3]*p[4],2) + 96*p[1]*p[2]*pow(p[7],3) + 3*pow(p[1]*p[4],4) + 18*pow(p[1]*p[3]*p[4]*p[4],2)
		+ 72*pow(p[7]*p[1]*p[4],2) + 9*pow(p[3]*p[4],4) + 72*pow(p[7]*p[3]*p[4],2) + 24*pow(p[7],4)
		+ (pow(p[1]*p[2],4) + 6*pow(p[1]*p[2]*p[2]*p[3],2) + 3*pow(p[2]*p[3],4) + 16*p[9]*pow(p[1]*p[2],3) + 48*p[9]*p[1]*pow(p[2],3)*pow(p[3],2)
		+ 6*pow(p[1]*p[1]*p[2]*p[4],2) + 36*pow(p[1]*p[2]*p[3]*p[4],2) + 72*pow(p[9]*p[1]*p[2],2) + 18*pow(p[2]*p[3]*p[3]*p[4],2) + 72*pow(p[9]*p[2]*p[3],2)
		+ 48*p[9]*pow(p[1],3)*p[2]*pow(p[4],2) + 144*p[9]*p[1]*p[2]*pow(p[3]*p[4],2) + 96*p[1]*p[2]*pow(p[9],3) + 3*pow(p[1]*p[4],4) + 18*pow(p[1]*p[3]*p[4]*p[4],2)
		+ 72*pow(p[9]*p[1]*p[4],2) + 9*pow(p[3]*p[4],4) + 72*pow(p[9]*p[3]*p[4],2) + 24*pow(p[9],4)))
		+ p[0]*(9*pow(p[5]*p[6],4) + 72*pow(p[8]*p[5]*p[6],2) + 24*pow(p[8],4));	// y_1^4*y_2*^4
	
	m[20] = (1 - p[0])/2*(pow(p[2],5)*pow(p[1],3) + 10*pow(p[1]*p[2],3)*pow(p[4],2) + 45*p[2]*pow(p[1],3)*pow(p[4],4) + 15*p[7]*pow(p[2]*p[2]*p[1],2)
		+ 90*p[7]*pow(p[1]*p[2]*p[4],2) + 45*p[7]*pow(p[1]*p[4]*p[4],2) + 3*pow(p[2],5)*p[1]*pow(p[3],2) + 30*pow(p[2],3)*p[1]*pow(p[3]*p[4],2)
		+ 60*pow(p[7],2)*pow(p[2],3)*p[1] + 45*p[1]*p[2]*pow(p[4]*p[4]*p[3],2) + 180*pow(p[7],2)*p[1]*p[2]*pow(p[4],2) + 15*p[7]*pow(p[2]*p[2]*p[3],2)
		+ 90*p[7]*pow(p[2]*p[3]*p[4],2) + 60*pow(p[7],3)*pow(p[2],2) + 45*p[7]*pow(p[4]*p[4]*p[3],2) + 60*pow(p[7],3)*pow(p[4],2)
		+ (pow(p[2],5)*pow(p[1],3) + 10*pow(p[1]*p[2],3)*pow(p[4],2) + 45*p[2]*pow(p[1],3)*pow(p[4],4) + 15*p[9]*pow(p[2]*p[2]*p[1],2)
		+ 90*p[9]*pow(p[1]*p[2]*p[4],2) + 45*p[9]*pow(p[1]*p[4]*p[4],2) + 3*pow(p[2],5)*p[1]*pow(p[3],2) + 30*pow(p[2],3)*p[1]*pow(p[3]*p[4],2)
		+ 60*pow(p[9],2)*pow(p[2],3)*p[1] + 45*p[1]*p[2]*pow(p[4]*p[4]*p[3],2) + 180*pow(p[9],2)*p[1]*p[2]*pow(p[4],2) + 15*p[9]*pow(p[2]*p[2]*p[3],2)
		+ 90*p[9]*pow(p[2]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[2],2) + 45*p[9]*pow(p[4]*p[4]*p[3],2) + 60*pow(p[9],3)*pow(p[4],2)))
		+ p[0]*(45*p[8]*pow(p[6]*p[6]*p[5],2) + 60*pow(p[8],3)*pow(p[6],2));	// y_1^3*y_w^5

	// // 補正係数
	// std::vector<double> k(NUM_OF_MOMENTEQ);
	// k[0] = 1.26;	k[1] = 0.66;	k[2] = 1.35;	k[3] = 3.81;	k[4] = 2.53;	k[5] = 2.85;	k[6] = 5.16;	k[7] = 7.25;
	// k[8] = 19.6;	k[9] = 11.5;	k[10] = 13.7;	k[11] = 18.3;	k[12] = 26.9;	k[13] = 27.9;	k[14] = 318.;

	// unsigned int i;
	// for (i = 0; i < m.size(); ++i) {
	// 	m[i]	= k[i]*m[i];
	// }
}

/**
 * @fn パラメータ値からヤコビアンを得る
 * @param const vector<double> &p パラメータ値
 * @param const vector< vector<double> > &m ヤコビアン
 */
void MomentEq::getJacobyFromParameter(const std::vector<double> &p, std::vector< std::vector<double> > &j)
{
		// ２次モーメントのヤコビ
	j[0][0] = -(pow(p[3],2) + pow(p[1],2)) + pow(p[5],2);
	j[0][1] = 2*(1 - p[0])*p[1];
	j[0][2] = 0;
	j[0][3] = 2*(1 - p[0])*p[3];
	j[0][4] = 0;
	j[0][5] = 2*p[0]*p[5];
	j[0][6] = 0;
	j[0][7] = 0;
	j[0][8] = 0;
	j[0][9] = 0;

	j[1][0] = -1/2*((p[7] + p[1]*p[2]) + (p[9] + p[1]*p[2])) + p[8];
	j[1][1] = (1 - p[0])/2*p[2];
	j[1][2] = (1 - p[0])/2*p[1];
	j[1][3] = 0;
	j[1][4] = 0;
	j[1][5] = 0;
	j[1][6] = 0;
	j[1][7] = (1 - p[0])/2;
	j[1][8] = p[0];
	j[1][9] = (1 - p[0])/2;
				
	j[2][0] = -(pow(p[4],2)+ pow(p[2],2)) + pow(p[6],2);
	j[2][1] = 0;
	j[2][2] = 2*(1 - p[0])*p[2];
	j[2][3] = 0;
	j[2][4] = 2*(1 - p[0])*p[4];
	j[2][5] = 0;
	j[2][6] = 2*p[0]*p[6];
	j[2][7] = 0;
	j[2][8] = 0;
	j[2][9] = 0;

	// ４次モーメントのヤコビ
	j[3][0] = -(3*pow(p[3],4) + 6*pow(p[1],2)*pow(p[3],2) + pow(p[1],4)) + 3*pow(p[5],4);
	j[3][1] = (1 - p[0])/2*(12*p[1]*pow(p[3],2) + 4*pow(p[1],3));
	j[3][2] = 0;
	j[3][3] = 12*(1 - p[0])*(pow(p[3],3) + pow(p[1],2)*p[3]);
	j[3][4] = 0;
	j[3][5] = 12*p[0]*pow(p[5],3);
	j[3][6] = 0;
	j[3][7] = 0;
	j[3][8] = 0;
	j[3][9] = 0;
	
	j[4][0] = -1/2*((3*pow(p[3],2)*(p[7] + p[1]*p[2]) + pow(p[1],2)*(3*p[7] + p[1]*p[2])) + (3*pow(p[3],2)*(p[9] + p[1]*p[2]) + pow(p[1],2)*(3*p[9] + p[1]*p[2]))) + 3*pow(p[5],2)*p[8];
	j[4][1] = (1 - p[0])/2*((3*p[2]*pow(p[3],2) + 6*p[1]*p[7] + 3* pow(p[1],2)*p[2]) + (3*p[2]*pow(p[3],2) + 6*p[1]*p[9] + 3* pow(p[1],2)*p[2]));
	j[4][2] = (1 - p[0])*(3*p[1]*pow(p[3],2) + pow(p[1],3));
	j[4][3] = 3*p[3]*(1 - p[0])*((p[7] + p[1]*p[2]) + (p[9] + p[1]*p[2]));
	j[4][4] = 0;
	j[4][5] = 6*p[0]*p[5]*p[8];
	j[4][6] = 0;
	j[4][7] = 3/2*(1 - p[0])*(pow(p[3],2) + pow(p[1],2));
	j[4][8] = 3*p[0]*pow(p[5],2);
	j[4][9] = 3/2*(1 - p[0])*(pow(p[3],2) + pow(p[1],2));

	j[5][0] = -1/2*((pow(p[3],2)*pow(p[4],2) + pow(p[1],2)*pow(p[4],2) + pow(p[2],2)*pow(p[3],2) + 2*pow(p[7],2) + 4*p[7]*p[1]*p[2] + pow(p[1],2)*pow(p[2],2))
			+ (pow(p[3],2)*pow(p[4],2) + pow(p[1],2)*pow(p[4],2) + pow(p[2],2)*pow(p[3],2) + 2*pow(p[9],2) + 4*p[9]*p[1]*p[2] + pow(p[1],2)*pow(p[2],2)))
			+ pow(p[5],2)*pow(p[6],2) + 2*pow(p[8],2);
	j[5][1] = (1 - p[0])/2*((2*p[1]*pow(p[4],2) + 4*p[2]*p[7] + 2*p[1]*pow(p[2],2)) + (2*p[1]*pow(p[4],2) + 4*p[2]*p[9] + 2*p[1]*pow(p[2],2)));
	j[5][2] = (1 - p[0])/2*((2*p[2]*pow(p[3],2) + 4*p[1]*p[7] + 2*p[2]*pow(p[1],2)) + (2*p[2]*pow(p[3],2) + 4*p[1]*p[9] + 2*p[2]*pow(p[1],2)));
	j[5][3] = (1 - p[0])*(2*p[3]*pow(p[4],2) + 2*pow(p[2],2)*p[3]);
	j[5][4] = (1 - p[0])*(2*p[4]*pow(p[3],2) + 2*pow(p[1],2)*p[4]);
	j[5][5] = 2*p[0]*p[5]*pow(p[6],2);
	j[5][6] = 2*p[0]*p[6]*pow(p[5],2);
	j[5][7] = 2*(1 - p[0])*(p[7] + p[1]*p[2]);
	j[5][8] = 4*p[0]*p[8];
	j[5][9] = 2*(1 - p[0])*(p[9] + p[1]*p[2]);

	j[6][0] = -1/2*((3*pow(p[4],2)*(p[7] + p[1]*p[2]) + pow(p[2],2)*(3*p[7] + p[1]*p[2])) + (3*pow(p[4],2)*(p[9] + p[1]*p[2]) + pow(p[2],2)*(3*p[9] + p[1]*p[2]))) + 3*pow(p[6],2)*p[8];
	j[6][1] = (1 - p[0])*(3*p[2]*pow(p[4],2) + pow(p[2],3));
	j[6][2] = (1 - p[0])/2*((3*p[1]*pow(p[4],2) + 6*p[2]*p[7] + 3*p[1]*pow(p[2],2)) + (3*p[1]*pow(p[4],2) + 6*p[2]*p[9] + 3*p[1]*pow(p[2],2)));
	j[6][3] = 0;
	j[6][4] = 3*p[4]*(1 - p[0])*((p[7] + p[1]*p[2]) + (p[9] + p[1]*p[2]));
	j[6][5] = 0;
	j[6][6] = 6*p[0]*p[6]*p[8];
	j[6][7] = 3/2*(1 - p[0])*(pow(p[4],2) + pow(p[2],2));
	j[6][8] = 3*p[0]*pow(p[6],2);
	j[6][9] = 3/2*(1 - p[0])*(pow(p[4],2) + pow(p[2],2));

	j[7][0] = -(3*pow(p[4],4) + 6*pow(p[2],2)*pow(p[4],2) + pow(p[2],4)) + 3*pow(p[6],4);
	j[7][1] = 0;
	j[7][2] = (1 - p[0])*(12*p[2]*pow(p[4],2) + 4* pow(p[2],3));
	j[7][3] = 0;
	j[7][4] = 12*(1 - p[0])*(pow(p[4],3) + pow(p[2],2)*p[4]);
	j[7][5] = 0;
	j[7][6] = 12*p[0]*pow(p[6],3);
	j[7][7] = 0;
	j[7][8] = 0;

	// ６次モーメントのヤコビ
	j[8][0] = -(15*pow(p[3],6) + 45*pow(p[3],4)*pow(p[1],2) + 15*pow(p[3],2)*pow(p[1],4) + pow(p[1],6)) + 15*pow(p[5],6);
	j[8][1] = (1 - p[0])*(90*pow(p[3],4)*p[1] + 60*pow(p[3],2)*pow(p[1],3) + 6*pow(p[1],5));
	j[8][2] = 0;
	j[8][3] = (1 - p[0])*(90*pow(p[3],5) + 180*pow(p[1],2)*pow(p[3],3) + 30*p[3]*pow(p[1],4));
	j[8][4] = 0;
	j[8][5] = 90*p[0]*pow(p[5],5);
	j[8][6] = 0;
	j[8][7] = 0;
	j[8][8] = 0;
	j[8][9] = 0;

	j[9][0] = -1/2*((15*pow(p[3],4)*(p[7] + p[1]*p[2]) + pow(p[1],5)*p[2] + 5*pow(p[1],4)*p[7] + 10*pow(p[1],3)*p[2]*pow(p[3],2) + 30*p[7]*pow(p[1],2)*pow(p[3],2))
			+ (15*pow(p[3],4)*(p[9] + p[1]*p[2]) + pow(p[1],5)*p[2] + 5*pow(p[1],4)*p[9] + 10*pow(p[1],3)*p[2]*pow(p[3],2) + 30*p[9]*pow(p[1],2)*pow(p[3],2)))
			+ 15*pow(p[5],4)*p[8];
	j[9][1] = (1 - p[0])/2*((15*p[2]*pow(p[3],4) + 5*pow(p[1],4)*p[2] + 20*pow(p[1],3)*p[7] + 30*pow(p[1],2)*p[2]*pow(p[3],2) + 60*pow(p[3],2)*p[1]*p[7])
			+ (15*p[2]*pow(p[3],4) + 5*pow(p[1],4)*p[2] + 20*pow(p[1],3)*p[9] + 30*pow(p[1],2)*p[2]*pow(p[3],2) + 60*pow(p[3],2)*p[1]*p[9]));
	j[9][2] = (1 - p[0])*(15*p[1]*pow(p[3],4) + pow(p[1],5) + 10*pow(p[1],3)* pow(p[3],2));
	j[9][3] = (1 - p[0])/2*((60*pow(p[3],3)*(p[7] + p[1]*p[2]) + 20*pow(p[1],3)*p[2]*p[3] + 60*p[3]*pow(p[1],2)*p[7])
			+ (60*pow(p[3],3)*(p[9] + p[1]*p[2]) + 20*pow(p[1],3)*p[2]*p[3] + 60*p[3]*pow(p[1],2)*p[9]));
	j[9][4] = 0;
	j[9][5] = 60*p[0]*pow(p[5],3)*p[8];
	j[9][6] = 0;
	j[9][7] = (1 - p[0])/2*(15*pow(p[3],4) + 5*pow(p[1],4) + 30*pow(p[1],2)*pow(p[3],2));
	j[9][8] = 15*p[0]*pow(p[5],4);
	j[9][9] = (1 - p[0])/2*(15*pow(p[3],4) + 5*pow(p[1],4) + 30*pow(p[1],2)*pow(p[3],2));

	j[10][0] = -1/2*((3*(pow(p[3],4)*pow(p[4],2) + 12*pow(p[3]*p[7],2)+ 3*pow(p[2],2)*pow(p[3],4) + 6*pow(p[1]*p[2]*p[3],2) + pow(p[1],4)*pow(p[2],2))
			+ 24*p[1]*p[2]*pow(p[3],2)*p[7] + 8*pow(p[1],3)*p[2]*p[7] + 6*pow(p[1]*p[3]*p[4],2) + 12*pow(p[1]*p[7],2) + pow(p[1],4)*pow(p[4],2))
			+ (3*(pow(p[3],4)*pow(p[4],2) + 12*pow(p[3]*p[9],2)+ 3*pow(p[2],2)*pow(p[3],4) + 6*pow(p[1]*p[2]*p[3],2) + pow(p[1],4)*pow(p[2],2))
			+ 24*p[1]*p[2]*pow(p[3],2)*p[9] + 8*pow(p[1],3)*p[2]*p[9] + 6*pow(p[1]*p[3]*p[4],2) + 12*pow(p[1]*p[9],2) + pow(p[1],4)*pow(p[4],2)))
			+ 3*(pow(p[5],4)*pow(p[6],2) + 4*pow(p[8]*p[5],2));
	j[10][1] = (1 - p[0])/2*((12*p[1]*pow(p[2]*p[3],2) + 4*pow(p[2],2)*pow(p[1],3) + 24*pow(p[3],2)*p[2]*p[7] + 24*pow(p[1],2)*p[2]*p[7] + 12*p[1]*pow(p[3]*p[4],2)
			+ 24*pow(p[7],2)*p[1] + 4*pow(p[1],3)*pow(p[4],2))
			+ (12*p[1]*pow(p[2]*p[3],2) + 4*pow(p[2],2)*pow(p[1],3) + 24*pow(p[3],2)*p[2]*p[9] + 24*pow(p[1],2)*p[2]*p[9] + 12*p[1]*pow(p[3]*p[4],2)
			+ 24*pow(p[9],2)*p[1] + 4*pow(p[1],3)*pow(p[4],2)));
	j[10][2] = (1 - p[0])/2*((12*pow(p[3]*p[1],2)*p[2] + 6*pow(p[3],4)*p[2] + 24*p[7]*pow(p[3],2)*p[1] + 2*pow(p[1],4)*p[2] + 8*p[7]*pow(p[1],3))
			+ (12*pow(p[3]*p[1],2)*p[2] + 6*pow(p[3],4)*p[2] + 24*p[9]*pow(p[3],2)*p[1] + 2*pow(p[1],4)*p[2] + 8*p[9]*pow(p[1],3)));
	j[10][3] = (1 - p[0])/2*((12*pow(p[4],2)*pow(p[3],3) + 24*p[3]*pow(p[7],2) + 12*pow(p[2],2)*pow(p[3],3) + 12*pow(p[1]*p[2],2)*p[3] + 48*p[1]*p[2]*p[3]*p[7] + 12*pow(p[1]*p[4],2)*p[3])
			+ (12*pow(p[4],2)*pow(p[3],3) + 24*p[3]*pow(p[9],2) + 12*pow(p[2],2)*pow(p[3],3) + 12*pow(p[1]*p[2],2)*p[3] + 48*p[1]*p[2]*p[3]*p[9] + 12*pow(p[1]*p[4],2)*p[3]));
	j[10][4] = p[4]*(1 - p[0])*(6*pow(p[3],4) + 12*pow(p[3]*p[1],2) + 2*pow(p[1],4));
	j[10][5] = 3*p[0]*(4*pow(p[6],2)*pow(p[5],3) + 8*pow(p[8],2)*p[5]);
	j[10][6] = 6*p[0]*pow(p[5],4)*p[6];
	j[10][7] = (1 - p[0])/2*(24*(pow(p[3],2)*p[7] + 24*pow(p[3],2)*p[1]*p[2] + 24*pow(p[1],2)*p[7] + 8*pow(p[1],3)*p[2]));
	j[10][8] = 24*p[0]*pow(p[5],2)*p[8];
	j[10][9] = (1 - p[0])/2*(24*(pow(p[3],2)*p[9] + 24*pow(p[3],2)*p[1]*p[2] + 24*pow(p[1],2)*p[9] + 8*pow(p[1],3)*p[2]));

	j[11][0] = -1/2*((6*pow((p[7]+p[1]*p[2]),3) + 9*p[7]*(pow(p[3]*p[4],2) + pow(p[1]*p[4],2) + pow(p[2]*p[3],2) - pow(p[1]*p[2],2)) + p[1]*p[2]*(9*pow(p[3]*p[4],2)
			+ 3*pow(p[1]*p[4],2) + 3*pow(p[2]*p[3],2) - 5*pow(p[1]*p[2],2)))
			+ (6*pow((p[9]+p[1]*p[2]),3) + 9*p[9]*(pow(p[3]*p[4],2) + pow(p[1]*p[4],2) + pow(p[2]*p[3],2) - pow(p[1]*p[2],2)) + p[1]*p[2]*(9*pow(p[3]*p[4],2)
			+ 3*pow(p[1]*p[4],2) + 3*pow(p[2]*p[3],2) - 5*pow(p[1]*p[2],2))))
			+ 6*pow(p[8],3) + 9*p[8]*pow(p[5]*p[6],2);
	j[11][1] = (1 - p[0])/2*((18*pow((p[7]+p[1]*p[2]),2)*p[2] + 18*p[7]*p[1]*(pow(p[4],2) - pow(p[2],2)) + p[2]*(9*pow(p[3]*p[4],2) + 3*pow(p[2]*p[3],2))
			+ 9*p[2]*pow(p[4]*p[1],2) - 15*pow(p[1],2)*pow(p[2],3))
			+ (18*pow((p[9]+p[1]*p[2]),2)*p[2] + 18*p[9]*p[1]*(pow(p[4],2) - pow(p[2],2)) + p[2]*(9*pow(p[3]*p[4],2) + 3*pow(p[2]*p[3],2))
			+ 9*p[2]*pow(p[4]*p[1],2) - 15*pow(p[1],2)*pow(p[2],3)));
	j[11][2] = (1 - p[0])/2*((18*pow((p[7]+p[1]*p[2]),2)*p[1] + 18*p[7]*p[2]*(pow(p[3],2) - pow(p[1],2)) + p[1]*(9*pow(p[3]*p[4],2) + 3*pow(p[1]*p[4],2))
			+ 9*p[1]*pow(p[3]*p[2],2) - 15*pow(p[2],2)*pow(p[1],3))
			+ (18*pow((p[9]+p[1]*p[2]),2)*p[1] + 18*p[9]*p[2]*(pow(p[3],2) - pow(p[1],2)) + p[1]*(9*pow(p[3]*p[4],2) + 3*pow(p[1]*p[4],2))
			+ 9*p[1]*pow(p[3]*p[2],2) - 15*pow(p[2],2)*pow(p[1],3)));
	j[11][3] = (1 - p[0])*p[3]*((9*p[7]*(pow(p[4],2) + pow(p[2],2)) + p[1]*p[2]*(9*pow(p[4],2) + 3*pow(p[2],2)))
			+ (9*p[9]*(pow(p[4],2) + pow(p[2],2)) + p[1]*p[2]*(9*pow(p[4],2) + 3*pow(p[2],2))));
	j[11][4] = (1 - p[0])*p[4]*((9*p[7]*(pow(p[3],2) + pow(p[1],2)) + p[1]*p[2]*(9*pow(p[3],2) + 3*pow(p[1],2)))
			+ (9*p[9]*(pow(p[3],2) + pow(p[1],2)) + p[1]*p[2]*(9*pow(p[3],2) + 3*pow(p[1],2))));
	j[11][5] = 18*p[0]*p[8]*p[5]*pow(p[6],2);
	j[11][6] = 18*p[0]*p[8]*p[6]*pow(p[5],2);
	j[11][7] = (1 - p[0])/2*(18*pow((p[7]+p[1]*p[2]),2) + 9*(pow(p[3]*p[4],2) + pow(p[1]*p[4],2) + pow(p[2]*p[3],2) - pow(p[1]*p[2],2)));
	j[11][8] = p[0]*(18*pow(p[8],2) + 9*pow(p[5]*p[6],2));
	j[11][9] = (1 - p[0])/2*(18*pow((p[9]+p[1]*p[2]),2) + 9*(pow(p[3]*p[4],2) + pow(p[1]*p[4],2) + pow(p[2]*p[3],2) - pow(p[1]*p[2],2)));
	
	j[12][0] = -1/2*((3*(pow(p[4],4)*pow(p[3],2) + 12*pow(p[4]*p[7],2)+ 3*pow(p[1],2)*pow(p[4],4) + 6*pow(p[1]*p[2]*p[4],2) + pow(p[2],4)*pow(p[1],2))
			+ 24*p[1]*p[2]*pow(p[4],2)*p[7] + 8*pow(p[2],3)*p[1]*p[7] + 6*pow(p[2]*p[3]*p[4],2) + 12*pow(p[2]*p[7],2) + pow(p[2],4)*pow(p[3],2))
			+ (3*(pow(p[4],4)*pow(p[3],2) + 12*pow(p[4]*p[9],2)+ 3*pow(p[1],2)*pow(p[4],4) + 6*pow(p[1]*p[2]*p[4],2) + pow(p[2],4)*pow(p[1],2))
			+ 24*p[1]*p[2]*pow(p[4],2)*p[9] + 8*pow(p[2],3)*p[1]*p[9] + 6*pow(p[2]*p[3]*p[4],2) + 12*pow(p[2]*p[9],2) + pow(p[2],4)*pow(p[3],2)))
			+ 3*(pow(p[6],4)*pow(p[5],2) + 4*pow(p[8]*p[6],2));
	j[12][1] = (1 - p[0])/2*((12*pow(p[4]*p[2],2)*p[1] + 6*pow(p[4],4)*p[1] + 24*p[7]*pow(p[4],2)*p[2] + 2*pow(p[2],4)*p[1] + 8*p[7]*pow(p[2],3))
			+ (12*pow(p[4]*p[2],2)*p[1] + 6*pow(p[4],4)*p[1] + 24*p[9]*pow(p[4],2)*p[2] + 2*pow(p[2],4)*p[1] + 8*p[9]*pow(p[2],3)));
	j[12][2] = (1 - p[0])/2*((12*p[2]*pow(p[1]*p[4],2) + 4*pow(p[1],2)*pow(p[2],3) + 24*pow(p[4],2)*p[1]*p[7] + 24*pow(p[2],2)*p[1]*p[7] + 12*p[2]*pow(p[3]*p[4],2)
			+ 24*pow(p[7],2)*p[1] + 4*pow(p[2],3)*pow(p[3],2))
			+ (12*p[2]*pow(p[1]*p[4],2) + 4*pow(p[1],2)*pow(p[2],3) + 24*pow(p[4],2)*p[1]*p[9] + 24*pow(p[2],2)*p[1]*p[9] + 12*p[2]*pow(p[3]*p[4],2)
			+ 24*pow(p[9],2)*p[2] + 4*pow(p[2],3)*pow(p[3],2)));
	j[12][3] = p[3]*(1 - p[0])*(6*pow(p[4],4) + 12*pow(p[4]*p[2],2) + 2*pow(p[2],4));
	j[12][4] = (1 - p[0])/2*((12*pow(p[3],2)*pow(p[4],3) + 24*p[4]*pow(p[7],2) + 12*pow(p[1],2)*pow(p[4],3) + 12*pow(p[1]*p[2],2)*p[4] + 48*p[1]*p[2]*p[4]*p[7] + 12*pow(p[2]*p[3],2)*p[4])
			+ (12*pow(p[3],2)*pow(p[4],3) + 24*p[4]*pow(p[9],2) + 12*pow(p[1],2)*pow(p[4],3) + 12*pow(p[1]*p[2],2)*p[4] + 48*p[1]*p[2]*p[4]*p[9] + 12*pow(p[2]*p[3],2)*p[4]));
	j[12][5] = 6*p[0]*pow(p[6],4)*p[5];
	j[12][6] = 3*p[0]*(4*pow(p[5],2)*pow(p[6],3) + 8*pow(p[8],2)*p[6]);
	j[12][7] = (1 - p[0])/2*(24*(pow(p[4],2)*p[7] + 24*pow(p[4],2)*p[1]*p[2] + 24*pow(p[2],2)*p[7] + 8*pow(p[2],3)*p[1]));
	j[12][8] = 24*p[0]*pow(p[6],2)*p[8];
	j[12][9] = (1 - p[0])/2*(24*(pow(p[4],2)*p[9] + 24*pow(p[4],2)*p[1]*p[2] + 24*pow(p[2],2)*p[9] + 8*pow(p[2],3)*p[1]));

	j[13][0] = -1/2*((15*pow(p[4],4)*(p[7] + p[1]*p[2]) + pow(p[2],5)*p[1] + 5*pow(p[2],4)*p[7] + 10*pow(p[2],3)*p[1]*pow(p[4],2) + 30*p[7]*pow(p[2],2)*pow(p[4],2))
			+ (15*pow(p[4],4)*(p[9] + p[1]*p[2]) + pow(p[2],5)*p[1] + 5*pow(p[2],4)*p[9] + 10*pow(p[2],3)*p[1]*pow(p[4],2) + 30*p[9]*pow(p[2],2)*pow(p[4],2)))
			+ 15*pow(p[6],4)*p[8];
	j[13][1] = (1 - p[0])*(15*p[2]*pow(p[4],4) + pow(p[2],5) + 10*pow(p[2],3)* pow(p[4],2));
	j[13][2] = (1 - p[0])/2*((15*p[1]*pow(p[4],4) + 5*pow(p[2],4)*p[1] + 20*pow(p[2],3)*p[7] + 30*pow(p[2],2)*p[1]*pow(p[4],2) + 60*pow(p[4],2)*p[2]*p[7])
			+ (15*p[1]*pow(p[4],4) + 5*pow(p[2],4)*p[1] + 20*pow(p[2],3)*p[9] + 30*pow(p[2],2)*p[1]*pow(p[4],2) + 60*pow(p[4],2)*p[2]*p[9]));
	j[13][3] = 0;
	j[13][4] = (1 - p[0])/2*((60*pow(p[4],3)*(p[7] + p[1]*p[2]) + 20*pow(p[2],3)*p[1]*p[4] + 60*p[4]*pow(p[2],2)*p[7])
			+ (60*pow(p[4],3)*(p[9] + p[1]*p[2]) + 20*pow(p[2],3)*p[1]*p[4] + 60*p[4]*pow(p[2],2)*p[9]));
	j[13][5] = 60*p[0]*pow(p[6],3)*p[8];
	j[13][6] = 0;
	j[13][7] = (1 - p[0])/2*(15*pow(p[4],4) + 5*pow(p[2],4) + 30*pow(p[2],2)*pow(p[4],2));
	j[13][8] = 15*p[0]*pow(p[6],4);
	j[13][9] = (1 - p[0])/2*(15*pow(p[4],4) + 5*pow(p[2],4) + 30*pow(p[2],2)*pow(p[4],2));
	
	j[14][0] = -(15*pow(p[4],6) + 45*pow(p[4],4)*pow(p[2],2) + 15*pow(p[4],2)*pow(p[2],4) + pow(p[2],6)) + 15*pow(p[6],6);
	j[14][1] = 0;
	j[14][2] = (1 - p[0])*(90*pow(p[4],4)*p[2] + 60*pow(p[4],2)*pow(p[2],3) + 6*pow(p[2],5));
	j[14][3] = 0;
	j[14][4] = (1 - p[0])*(90*pow(p[4],5) + 180*pow(p[2],2)*pow(p[4],3) + 30*p[4]*pow(p[2],4));
	j[14][5] = 0;
	j[14][6] = 90*p[0]*pow(p[6],5);
	j[14][7] = 0;
	j[14][8] = 0;
	j[14][9] = 0;
	
	// ８次モーメントのヤコビ
	j[15][0] = -(pow(p[1],8) + 28*pow(p[3],2)*pow(p[1],6) + 210*pow(p[3]*p[1],4) + 420*pow(p[3],6)*pow(p[1],2) + 105*pow(p[3],8))
			+ 105*pow(p[5],8);
	j[15][1] = (1 - p[0])*(8*pow(p[1],7) + 168*pow(p[3],2)*pow(p[1],5) + 840*pow(p[3],4)*pow(p[1],3) + 840*pow(p[3],6)*p[1]);
	j[15][2] = 0;
	j[15][3] = (1 - p[0])*(56*p[3]*pow(p[1],6) + 840*pow(p[3],3)*pow(p[1],4) + 2520*pow(p[3],5)*pow(p[1],2) + 840*pow(p[3],7));
	j[15][4] = 0;
	j[15][5] = 840*p[0]*pow(p[5],7);
	j[15][6] = 0;
	j[15][7] = 0;
	j[15][8] = 0;
	
	j[16][0] = -1/2*((pow(p[1],7)*p[2] + 21*pow(p[3],2)*pow(p[1],5)*p[2] + 105*pow(p[3],4)*pow(p[1],3)*p[2] + 105*pow(p[3],6)*p[1]*p[2] + p[7]*(7*pow(p[1],6)
			+ 105*pow(p[3],2)*pow(p[1],4) + 315*pow(p[3],4)*pow(p[1],2) + 105*pow(p[3],6)))
			+ (pow(p[1],7)*p[2] + 21*pow(p[3],2)*pow(p[1],5)*p[2] + 105*pow(p[3],4)*pow(p[1],3)*p[2] + 105*pow(p[3],6)*p[1]*p[2] + p[9]*(7*pow(p[1],6)
			+ 105*pow(p[3],2)*pow(p[1],4) + 315*pow(p[3],4)*pow(p[1],2) + 105*pow(p[3],6))))
			+ 105*p[0]*p[8]*pow(p[5],6);
	j[16][1] = (1 - p[0])/2*((7*pow(p[1],6)*p[2] + 105*pow(p[3],2)*pow(p[1],4)*p[2] + 315*pow(p[3],4)*pow(p[1],2)*p[2] + 105*pow(p[3],6)*p[2] + p[7]*(42*pow(p[1],5)
			+ 420*pow(p[3],2)*pow(p[1],3) + 630*pow(p[3],4)*p[1]))
			+ (7*pow(p[1],6)*p[2] + 105*pow(p[3],2)*pow(p[1],4)*p[2] + 315*pow(p[3],4)*pow(p[1],2)*p[2] + 105*pow(p[3],6)*p[2] + p[9]*(42*pow(p[1],5)
			+ 420*pow(p[3],2)*pow(p[1],3) + 630*pow(p[3],4)*p[1])));
	j[16][2] = (1 - p[0])*(pow(p[1],7) + 21*pow(p[3],2)*pow(p[1],5) + 105*pow(p[3],4)*pow(p[1],3) + 105*pow(p[3],6)*p[1]);
	j[16][3] = (1 - p[0])/2*((42*p[3]*pow(p[1],5)*p[2] + 420*pow(p[3],3)*pow(p[1],3)*p[2] + 630*pow(p[3],5)*p[1]*p[2] + p[7]*(210*p[3]*pow(p[1],4) + 1260*pow(p[3],3)*pow(p[1],2) + 630*pow(p[3],5)))
			+ (42*p[3]*pow(p[1],5)*p[2] + 420*pow(p[3],3)*pow(p[1],3)*p[2] + 630*pow(p[3],5)*p[1]*p[2] + p[9]*(210*p[3]*pow(p[1],4) + 1260*pow(p[3],3)*pow(p[1],2) + 630*pow(p[3],5))));
	j[16][4] = 0;
	j[16][5] = 630*p[0]*p[8]*pow(p[5],5);
	j[16][6] = 0;
	j[16][7] = (1 - p[0])/2*(7*pow(p[1],6) + 105*pow(p[3],2)*pow(p[1],4) + 315*pow(p[3],4)*pow(p[1],2) + 105*pow(p[3],6));
	j[16][8] = 105*p[0]*pow(p[5],6);
	j[16][9] = (1 - p[0])/2*(7*pow(p[1],6) + 105*pow(p[3],2)*pow(p[1],4) + 315*pow(p[3],4)*pow(p[1],2) + 105*pow(p[3],6));

	j[17][0] = -1/2*((pow(p[1]*p[1]*p[1]*p[2],2) + 15*pow(p[1]*p[1]*p[2]*p[3],2) + 45*pow(p[1]*p[2]*p[3]*p[3],2) + 15*pow(p[2]*p[3]*p[3]*p[3],2) + 12*p[7]*pow(p[1],5)*p[2]
			+ 120*p[7]*pow(p[1],3)*p[2]*pow(p[3],2) + 180*p[7]*p[1]*p[2]*pow(p[3],4) + pow(p[1]*p[1]*p[1]*p[4],2) + 15*pow(p[1]*p[1]*p[3]*p[4],2)
			+ 30*pow(p[7]*p[1]*p[1],2) + 45*pow(p[1]*p[3]*p[3]*p[4],2) + 180*pow(p[7]*p[1]*p[3],2) + 15*pow(p[3]*p[3]*p[3]*p[4],2)+ 90*pow(p[7]*p[3]*p[3],2))
			+ (pow(p[1]*p[1]*p[1]*p[2],2) + 15*pow(p[1]*p[1]*p[2]*p[3],2) + 45*pow(p[1]*p[2]*p[3]*p[3],2) + 15*pow(p[2]*p[3]*p[3]*p[3],2) + 12*p[9]*pow(p[1],5)*p[2]
			+ 120*p[9]*pow(p[1],3)*p[2]*pow(p[3],2) + 180*p[9]*p[1]*p[2]*pow(p[3],4) + pow(p[1]*p[1]*p[1]*p[4],2) + 15*pow(p[1]*p[1]*p[3]*p[4],2)
			+ 30*pow(p[9]*p[1]*p[1],2) + 45*pow(p[1]*p[3]*p[3]*p[4],2) + 180*pow(p[9]*p[1]*p[3],2) + 15*pow(p[3]*p[3]*p[3]*p[4],2) + 90*pow(p[9]*p[3]*p[3],2)))
			+ 15*(pow(p[5]*p[5]*p[5]*p[6],2) + 6*pow(p[8]*p[5]*p[5],2));
	j[17][1] = (1 - p[0])/2*((6*pow(p[1],5)*pow(p[2],2) + 60*pow(p[1],3)*pow(p[2]*p[3],2) + 90*p[1]*pow(p[2]*p[3]*p[3],2)+ 60*p[7]*pow(p[1],4)*p[2] + 360*p[7]*pow(p[1]*p[3],2)*p[2]
			+ 180*p[7]*p[2]*pow(p[3],4) + 6*pow(p[1],5)*pow(p[4],2)+ 60*pow(p[3]*p[4],2)*pow(p[1],3) + 120*pow(p[7],2)*pow(p[1],3) + 90*p[1]*pow(p[3]*p[3]*p[4],2) + 360*pow(p[3]*p[7],2)*p[1])
			+ (6*pow(p[1],5)*pow(p[2],2) + 60*pow(p[1],3)*pow(p[2]*p[3],2) + 90*p[1]*pow(p[2]*p[3]*p[3],2)+ 60*p[9]*pow(p[1],4)*p[2] + 360*p[9]*pow(p[1]*p[3],2)*p[2]
			+ 180*p[9]*p[2]*pow(p[3],4) + 6*pow(p[1],5)*pow(p[4],2)+ 60*pow(p[3]*p[4],2)*pow(p[1],3) + 120*pow(p[9],2)*pow(p[1],3) + 90*p[1]*pow(p[3]*p[3]*p[4],2) + 360*pow(p[3]*p[9],2)*p[1]));
	j[17][2] = (1 - p[0])/2*((2*pow(p[1],6)*p[2] + 30*pow(p[1]*p[1]*p[3],2)*p[2] + 90*p[2]*pow(p[1]*p[3]*p[3],2) + 30*p[2]*pow(p[3],6) + 12*p[7]*pow(p[1],5) + 120*p[7]*pow(p[1],3)*pow(p[3],2) + 180*p[7]*p[1]*pow(p[3],4))
			+ (2*pow(p[1],6)*p[2] + 30*pow(p[1]*p[1]*p[3],2)*p[2] + 90*p[2]*pow(p[1]*p[3]*p[3],2) + 30*p[2]*pow(p[3],6) + 12*p[9]*pow(p[1],5) + 120*p[9]*pow(p[1],3)*pow(p[3],2) + 180*p[9]*p[1]*pow(p[3],4)));
	j[17][3] = (1 - p[0])/2*((30*pow(p[1]*p[1]*p[2],2)*p[3] + 180*pow(p[1]*p[2],2)*pow(p[3],3) + 90*pow(p[2],2)*pow(p[3],5)+ 240*p[7]*pow(p[1],3)*p[2]*p[3] + 720*p[7]*p[1]*p[2]*pow(p[3],3)
			+ 30*pow(p[1]*p[1]*p[4],2)*p[3] + 180*pow(p[1]*p[4],2)*pow(p[3],3) + 360*pow(p[7]*p[1],2)*p[3] + 90*pow(p[4],2)*pow(p[3],5) + 360*pow(p[7],2)*pow(p[3],3))
			+ (30*pow(p[1]*p[1]*p[2],2)*p[3] + 180*pow(p[1]*p[2],2)*pow(p[3],3) + 90*pow(p[2],2)*pow(p[3],5) + 240*p[9]*pow(p[1],3)*p[2]*p[3] + 720*p[9]*p[1]*p[2]*pow(p[3],3)
			+ 30*pow(p[1]*p[1]*p[4],2)*p[3] + 180*pow(p[1]*p[4],2)*pow(p[3],3)+ 360*pow(p[9]*p[1],2)*p[3] + 90*pow(p[4],2)*pow(p[3],5) + 360*pow(p[9],2)*pow(p[3],3)));
	j[17][4] = (1 - p[0])*(2*pow(p[1],6)*p[4] + 30*pow(p[1]*p[1]*p[3],2)*p[4] + 90*pow(p[1]*p[3]*p[3],2)*p[4] + 30*pow(p[3],6)*p[4]);
	j[17][5] = p[0]*(90*pow(p[5],5)*pow(p[6],2) + 360*pow(p[8],2)*pow(p[6],3));
	j[17][6] = p[0]*30*pow(p[5],6)*p[6];
	j[17][7] = (1 - p[0])/2*(12*pow(p[1],5)*p[2] + 120*pow(p[1],3)*p[2]*pow(p[3],2) + 180*p[1]*p[2]*pow(p[3],4) + 60*p[7]*pow(p[1],4) + 360*p[7]*pow(p[1]*p[3],2) + 180*p[7]*pow(p[3],4));
	j[17][8] = p[0]*180*p[8]*pow(p[5],4);
	j[17][9] = (1 - p[0])/2*(12*pow(p[1],5)*p[2] + 120*pow(p[1],3)*p[2]*pow(p[3],2) + 180*p[1]*p[2]*pow(p[3],4) + 60*p[9]*pow(p[1],4) + 360*p[9]*pow(p[1]*p[3],2) + 180*p[9]*pow(p[3],4));
	
	j[18][0] = -1/2*((pow(p[1],5)*pow(p[2],3) + 10*pow(p[1]*p[2],3)*pow(p[3],2) + 45*p[1]*pow(p[2],3)*pow(p[3],4) + 15*p[7]*pow(p[1]*p[1]*p[2],2)
			+ 90*p[7]*pow(p[1]*p[2]*p[3],2) + 45*p[7]*pow(p[2]*p[3]*p[3],2) + 3*pow(p[1],5)*p[2]*pow(p[4],2) + 30*pow(p[1],3)*p[2]*pow(p[3]*p[4],2)
			+ 60*pow(p[7],2)*pow(p[1],3)*p[2] + 45*p[1]*p[2]*pow(p[3]*p[3]*p[4],2) + 180*pow(p[7],2)*p[1]*p[2]*pow(p[3],2) + 15*p[7]*pow(p[1]*p[1]*p[4],2)
			+ 90*p[7]*pow(p[1]*p[3]*p[4],2) + 60*pow(p[7],3)*pow(p[1],2) + 45*p[7]*pow(p[3]*p[3]*p[4],2) + 60*pow(p[7],3)*pow(p[3],2))
			+ (pow(p[1],5)*pow(p[2],3) + 10*pow(p[1]*p[2],3)*pow(p[3],2) + 45*p[1]*pow(p[2],3)*pow(p[3],4) + 15*p[9]*pow(p[1]*p[1]*p[2],2)
			+ 90*p[9]*pow(p[1]*p[2]*p[3],2) + 45*p[9]*pow(p[2]*p[3]*p[3],2) + 3*pow(p[1],5)*p[2]*pow(p[4],2) + 30*pow(p[1],3)*p[2]*pow(p[3]*p[4],2)
			+ 60*pow(p[9],2)*pow(p[1],3)*p[2] + 45*p[1]*p[2]*pow(p[3]*p[3]*p[4],2) + 180*pow(p[9],2)*p[1]*p[2]*pow(p[3],2) + 15*p[9]*pow(p[1]*p[1]*p[4],2)
			+ 90*p[9]*pow(p[1]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[1],2) + 45*p[9]*pow(p[3]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[3],2)))
			+ (45*p[8]*pow(p[5]*p[5]*p[6],2) + 60*pow(p[8],3)*pow(p[5],2));
	j[18][1] = (1 - p[0])/2*((5*pow(p[1],4)*pow(p[2],3) + 30*pow(p[1]*p[3],2)*pow(p[2],3) + 45*pow(p[2],3)*pow(p[3],4) + 60*p[7]*pow(p[1],3)*pow(p[2],2) + 180*p[7]*p[1]*pow(p[2]*p[3],2)
			+ 15*pow(p[1]*p[1]*p[4],2)*p[2] + 90*pow(p[1]*p[3]*p[4],2)*p[2]+ 180*pow(p[7]*p[1],2)*p[2] + 45*p[2]*pow(p[3]*p[3]*p[4],2) + 180*pow(p[7]*p[3],2)*p[2] + 60*p[7]*pow(p[1],3)*pow(p[4],2)
			+ 180*p[7]*p[1]*pow(p[3]*p[4],2) + 120*pow(p[7],3)*p[1])
			+ (5*pow(p[1],4)*pow(p[2],3) + 30*pow(p[1]*p[3],2)*pow(p[2],3) + 45*pow(p[2],3)*pow(p[3],4) + 60*p[9]*pow(p[1],3)*pow(p[2],2) + 180*p[9]*p[1]*pow(p[2]*p[3],2)
			+ 15*pow(p[1]*p[1]*p[4],2)*p[2] + 90*pow(p[1]*p[3]*p[4],2)*p[2]+ 180*pow(p[9]*p[1],2)*p[2] + 45*p[2]*pow(p[3]*p[3]*p[4],2) + 180*pow(p[9]*p[3],2)*p[2] + 60*p[9]*pow(p[1],3)*pow(p[4],2)
			+ 180*p[9]*p[1]*pow(p[3]*p[4],2) + 120*pow(p[9],3)*p[1]));
	j[18][2] = (1 - p[0])/2*((3*pow(p[1],5)*pow(p[2],2) + 30*pow(p[1],3)*pow(p[2]*p[3],2) + 135*p[1]*pow(p[2]*p[3]*p[3],2) + 30*p[7]*pow(p[1],4)*p[2] + 180*p[2]*p[7]*pow(p[1]*p[3],2)
			+ 90*p[7]*p[2]*pow(p[3],4) + 3*pow(p[1],5)*pow(p[4],2)+ 30*pow(p[1],3)*pow(p[3]*p[4],2) + 60*pow(p[7],2)*pow(p[1],3) + 45*p[1]*pow(p[3]*p[3]*p[4],2) + 180*pow(p[7]*p[3],2)*p[1])
			+ (3*pow(p[1],5)*pow(p[2],2) + 30*pow(p[1],3)*pow(p[2]*p[3],2) + 135*p[1]*pow(p[2]*p[3]*p[3],2) + 30*p[9]*pow(p[1],4)*p[2] + 180*p[2]*p[9]*pow(p[1]*p[3],2)
			+ 90*p[9]*p[2]*pow(p[3],4) + 3*pow(p[1],5)*pow(p[4],2)+ 30*pow(p[1],3)*pow(p[3]*p[4],2) + 60*pow(p[9],2)*pow(p[1],3) + 45*p[1]*pow(p[3]*p[3]*p[4],2) + 180*pow(p[9]*p[3],2)*p[1]));
	j[18][3] = (1 - p[0])/2*((20*pow(p[1]*p[2],3)*p[3] + 180*p[1]*pow(p[2]*p[3],3) + 180*p[7]*pow(p[1]*p[2],2)*p[3] + 180*p[7]*pow(p[2],2)*pow(p[3],3) + 60*pow(p[1],3)*p[2]*pow(p[4],2)*p[3]
			+ 180*p[1]*p[2]*pow(p[4],2)*pow(p[3],3) + 360*pow(p[7],2)*p[1]*p[2]*p[3] + 180*p[7]*pow(p[1]*p[4],2)*p[3] + 180*p[7]*pow(p[3],3)*pow(p[4],2) + 120*pow(p[7],3)*p[3])
			+ (20*pow(p[1]*p[2],3)*p[3] + 180*p[1]*pow(p[2]*p[3],3) + 180*p[9]*pow(p[1]*p[2],2)*p[3] + 180*p[9]*pow(p[2],2)*pow(p[3],3) + 60*pow(p[1],3)*p[2]*pow(p[4],2)*p[3]
			+ 180*p[1]*p[2]*pow(p[4],2)*pow(p[3],3) + 360*pow(p[9],2)*p[1]*p[2]*p[3] + 180*p[9]*pow(p[1]*p[4],2)*p[3] + 180*p[9]*pow(p[3],3)*pow(p[4],2) + 120*pow(p[9],3)*p[3]));
	j[18][4] = (1 - p[0])/2*((6*pow(p[1],5)*p[2]*p[4] + 60*pow(p[1],3)*p[2]*pow(p[3],2)*p[4] + 90*p[1]*p[2]*pow(p[3],4)*p[4]+ 30*p[7]*pow(p[1],4)*p[4] + 180*p[7]*pow(p[1]*p[3],2)*p[4] + 90*p[7]*pow(p[3],4)*p[4])
			+ (6*pow(p[1],5)*p[2]*p[4] + 60*pow(p[1],3)*p[2]*pow(p[3],2)*p[4] + 90*p[1]*p[2]*pow(p[3],4)*p[4]+ 30*p[9]*pow(p[1],4)*p[4] + 180*p[9]*pow(p[1]*p[3],2)*p[4] + 90*p[9]*pow(p[3],4)*p[4]));
	j[18][5] = p[0]*(180*p[8]*pow(p[5],3)*pow(p[6],2) + 120*pow(p[8],3)*p[5]);
	j[18][6] = p[0]*90*p[8]*pow(p[5],4)*p[6];
	j[18][7] = (1 - p[0])/2*(15*pow(p[1]*p[1]*p[2],2) + 90*pow(p[1]*p[2]*p[3],2) + 45*pow(p[2],2)*pow(p[3],4) + 120*p[7]*pow(p[1],3)*p[2] + 360*p[7]*p[1]*p[2]*pow(p[3],2)
			+ 15*pow(p[1]*p[1]*p[4],2) + 90*pow(p[1]*p[3]*p[4],2) + 180*pow(p[7]*p[1],2) + 45*pow(p[3],4)*pow(p[4],2) + 180*pow(p[7]*p[3],2));
	j[18][8] = p[0]*(45*pow(p[5]*p[5]*p[6],2) + 180*pow(p[8]*p[5],2));
	j[18][9] = (1 - p[0])/2*(15*pow(p[1]*p[1]*p[2],2) + 90*pow(p[1]*p[2]*p[3],2) + 45*pow(p[2],2)*pow(p[3],4) + 120*p[9]*pow(p[1],3)*p[2] + 360*p[9]*p[1]*p[2]*pow(p[3],2)
			+ 15*pow(p[1]*p[1]*p[4],2) + 90*pow(p[1]*p[3]*p[4],2) + 180*pow(p[9]*p[1],2) + 45*pow(p[3],4)*pow(p[4],2) + 180*pow(p[9]*p[3],2));

	j[19][0] = -1/2* ((pow(p[1]*p[2],4) + 6*pow(p[1]*p[2]*p[2]*p[3],2) + 3*pow(p[2]*p[3],4) + 16*p[7]*pow(p[1]*p[2],3) + 48*p[7]*p[1]*pow(p[2],3)*pow(p[3],2) + 6*pow(p[1]*p[1]*p[2]*p[4],2)
			+ 36*pow(p[1]*p[2]*p[3]*p[4],2) + 72*pow(p[7]*p[1]*p[2],2) + 18*pow(p[2]*p[3]*p[3]*p[4],2) + 72*pow(p[7]*p[2]*p[3],2)+ 48*p[7]*pow(p[1],3)*p[2]*pow(p[4],2) + 144*p[7]*p[1]*p[2]*pow(p[3]*p[4],2)
			+ 96*p[1]*p[2]*pow(p[7],3) + 3*pow(p[1]*p[4],4) + 18*pow(p[1]*p[3]*p[4]*p[4],2) + 72*pow(p[7]*p[1]*p[4],2) + 9*pow(p[3]*p[4],4) + 72*pow(p[7]*p[3]*p[4],2) + 24*pow(p[7],4))
			+ (pow(p[1]*p[2],4) + 6*pow(p[1]*p[2]*p[2]*p[3],2)+ 3*pow(p[2]*p[3],4) + 16*p[9]*pow(p[1]*p[2],3) + 48*p[9]*p[1]*pow(p[2],3)*pow(p[3],2)+ 6*pow(p[1]*p[1]*p[2]*p[4],2)
			+ 36*pow(p[1]*p[2]*p[3]*p[4],2) + 72*pow(p[9]*p[1]*p[2],2) + 18*pow(p[2]*p[3]*p[3]*p[4],2) + 72*pow(p[9]*p[2]*p[3],2)+ 48*p[9]*pow(p[1],3)*p[2]*pow(p[4],2) + 144*p[9]*p[1]*p[2]*pow(p[3]*p[4],2)
			+ 96*p[1]*p[2]*pow(p[9],3) + 3*pow(p[1]*p[4],4)+ 18*pow(p[1]*p[3]*p[4]*p[4],2) + 72*pow(p[9]*p[1]*p[4],2) + 9*pow(p[3]*p[4],4) + 72*pow(p[9]*p[3]*p[4],2) + 24*pow(p[9],4)))
			+ 9*pow(p[5]*p[6],4) + 72*pow(p[8]*p[5]*p[6],2) + 24*pow(p[8],4);
	j[19][1] = (1 - p[0])*((4*pow(p[1],3)*pow(p[2],4) + 12*p[1]*pow(p[2]*p[2]*p[3],2) + 48*p[7]*pow(p[2],3)*pow(p[1],2) + 48*p[7]*pow(p[2],3)*pow(p[3],2) + 24*pow(p[1],3)*pow(p[2]*p[4],2)
			+ 72*p[1]*pow(p[2]*p[3]*p[4],2) + 144*pow(p[7],2)*pow(p[2],2)*p[1]+ 144*p[7]*pow(p[1]*p[4],2)*p[2] + 144*p[7]*p[2]*pow(p[3]*p[4],2) + 96*p[2]*pow(p[7],3) + 12*pow(p[4],4)*pow(p[1],3)
			+ 36*pow(p[3]*p[4]*p[4],2)*p[1] + 144*pow(p[7]*p[4],2)*p[1])
			+ (4*pow(p[1],3)*pow(p[2],4) + 12*p[1]*pow(p[2]*p[2]*p[3],2) + 48*p[9]*pow(p[2],3)*pow(p[1],2) + 48*p[9]*pow(p[2],3)*pow(p[3],2) + 24*pow(p[1],3)*pow(p[2]*p[4],2)
			+ 72*p[1]*pow(p[2]*p[3]*p[4],2) + 144*pow(p[9],2)*pow(p[2],2)*p[1]+ 144*p[9]*pow(p[1]*p[4],2)*p[2] + 144*p[9]*p[2]*pow(p[3]*p[4],2) + 96*p[2]*pow(p[9],3) + 12*pow(p[4],4)*pow(p[1],3)
			+ 36*pow(p[3]*p[4]*p[4],2)*p[1] + 144*pow(p[9]*p[4],2)*p[1]));
	j[19][2] = (1 - p[0])*((4*pow(p[1],4)*pow(p[2],3) + 24*pow(p[1]*p[3],2)*pow(p[2],3) + 12*pow(p[2],3)*pow(p[3],4) + 48*p[7]*pow(p[1],3)*pow(p[2],2) + 144*p[7]*p[1]*pow(p[2]*p[3],2)
			+ 12*pow(p[1]*p[1]*p[4],2)*p[2] + 72*pow(p[1]*p[3]*p[4],2)*p[2] + 144*pow(p[7]*p[1],2)*p[2] + 36*pow(p[3]*p[3]*p[4],2)*p[2] + 144*pow(p[7]*p[3],2)*p[2] + 48*p[7]*pow(p[1],3)*pow(p[4],2)
			+ 144*p[7]*p[1]*pow(p[3]*p[4],2) + 96*p[1]*pow(p[7],3))
			+ (4*pow(p[1],4)*pow(p[2],3) + 24*pow(p[1]*p[3],2)*pow(p[2],3) + 12*pow(p[2],3)*pow(p[3],4) + 48*p[9]*pow(p[1],3)*pow(p[2],2) + 144*p[9]*p[1]*pow(p[2]*p[3],2)
			+ 12*pow(p[1]*p[1]*p[4],2)*p[2] + 72*pow(p[1]*p[3]*p[4],2)*p[2] + 144*pow(p[9]*p[1],2)*p[2] + 36*pow(p[3]*p[3]*p[4],2)*p[2] + 144*pow(p[9]*p[3],2)*p[2] + 48*p[9]*pow(p[1],3)*pow(p[4],2)
			+ 144*p[9]*p[1]*pow(p[3]*p[4],2) + 96*p[1]*pow(p[9],3)));
	j[19][3] = (1 - p[0])*((12*pow(p[1]*p[2]*p[2],2)*p[3] + 12*pow(p[2],4)*pow(p[3],3) + 96*p[7]*p[1]*pow(p[2],3)*p[3] + 72*pow(p[1]*p[2]*p[4],2)*p[3] + 72*pow(p[2]*p[4],2)*pow(p[3],3)
			+ 144*pow(p[7]*p[2],2)*p[3] + 288*p[7]*p[1]*p[2]*p[3]*pow(p[4],2) + 36*pow(p[1]*p[4]*p[4],2)*p[3]+ 36*pow(p[3],3)*pow(p[4],4) + 144*pow(p[7]*p[4],2)*p[3])
			+ (12*pow(p[1]*p[2]*p[2],2)*p[3] + 12*pow(p[2],4)*pow(p[3],3) + 96*p[9]*p[1]*pow(p[2],3)*p[3] + 72*pow(p[1]*p[2]*p[4],2)*p[3] + 72*pow(p[2]*p[4],2)*pow(p[3],3)
			+ 144*pow(p[9]*p[2],2)*p[3] + 288*p[9]*p[1]*p[2]*p[3]*pow(p[4],2) + 36*pow(p[1]*p[4]*p[4],2)*p[3]+ 36*pow(p[3],3)*pow(p[4],4) + 144*pow(p[9]*p[4],2)*p[3]));
	j[19][4] = (1 - p[0])*((12*pow(p[1]*p[1]*p[2],2)*p[4] + 72*pow(p[1]*p[2]*p[3],2)*p[4] + 36*pow(p[2]*p[3]*p[3],2)*p[4] + 96*p[7]*pow(p[1],3)*p[2]*p[4] + 288*p[7]*p[1]*p[2]*pow(p[3],2)*p[4]
			+ 12*pow(p[1],4)*pow(p[4],3) + 72*pow(p[1]*p[3],2)*pow(p[4],3) + 144*pow(p[7]*p[1],2)*p[4] + 36*pow(p[3],4)*pow(p[4],3) + 144*pow(p[7]*p[3],2)*p[4])
			+ (12*pow(p[1]*p[1]*p[2],2)*p[4] + 72*pow(p[1]*p[2]*p[3],2)*p[4] + 36*pow(p[2]*p[3]*p[3],2)*p[4] + 96*p[9]*pow(p[1],3)*p[2]*p[4] + 288*p[9]*p[1]*p[2]*pow(p[3],2)*p[4]
			+ 12*pow(p[1],4)*pow(p[4],3) + 72*pow(p[1]*p[3],2)*pow(p[4],3) + 144*pow(p[9]*p[1],2)*p[4] + 36*pow(p[3],4)*pow(p[4],3) + 144*pow(p[9]*p[3],2)*p[4]));
	j[19][5] = p[0]*(36*pow(p[5],3)*pow(p[6],4) + 144*pow(p[8]*p[6],2)*p[5]);
	j[19][6] = p[0]*(36*pow(p[5],4)*pow(p[6],3) + 144*pow(p[7]*p[5],2)*p[6]);
	j[19][7] = (1 - p[0])/2*(16*pow(p[1]*p[2],3) + 48*p[1]*pow(p[2],3)*pow(p[3],2) + 144*p[7]*pow(p[1]*p[2],2) + 144*p[7]*pow(p[2]*p[3],2) + 48*pow(p[1],3)*p[2]*pow(p[4],2)
			+ 144*p[1]*p[2]*pow(p[3]*p[4],2) + 144*p[7]*pow(p[1]*p[4],2) + 288*p[1]*p[2]*pow(p[7],2) + 144*p[7]*pow(p[3]*p[4],2) + 96*pow(p[7],3));
	j[19][8] = p[0]*(144*p[8]*pow(p[5]*p[6],2) + 96*pow(p[8],3));
	j[19][9] = (1 - p[0])/2*(16*pow(p[1]*p[2],3) + 48*p[1]*pow(p[2],3)*pow(p[3],2) + 144*p[9]*pow(p[1]*p[2],2) + 144*p[9]*pow(p[2]*p[3],2) + 48*pow(p[1],3)*p[2]*pow(p[4],2)
			+ 144*p[1]*p[2]*pow(p[3]*p[4],2) + 144*p[9]*pow(p[1]*p[4],2) + 288*p[1]*p[2]*pow(p[9],2) + 144*p[9]*pow(p[3]*p[4],2) + 96*pow(p[9],3));
	
	j[20][0] = -1/2*((pow(p[2],5)*pow(p[1],3) + 10*pow(p[2]*p[1],3)*pow(p[4],2) + 45*p[2]*pow(p[1],3)*pow(p[4],4) + 15*p[7]*pow(p[2]*p[2]*p[1],2)
			+ 90*p[7]*pow(p[1]*p[2]*p[4],2) + 45*p[7]*pow(p[3]*p[2]*p[2],2) + 3*pow(p[2],5)*p[1]*pow(p[3],2) + 30*pow(p[2],3)*p[1]*pow(p[3]*p[4],2)
			+ 60*pow(p[7],2)*pow(p[2],3)*p[1] + 45*p[1]*p[2]*pow(p[4]*p[4]*p[3],2) + 180*pow(p[7],2)*p[1]*p[2]*pow(p[4],2) + 15*p[7]*pow(p[2]*p[2]*p[3],2)
			+ 90*p[7]*pow(p[2]*p[3]*p[4],2) + 60*pow(p[7],3)*pow(p[2],2) + 45*p[7]*pow(p[4]*p[4]*p[3],2) + 60*pow(p[7],3)*pow(p[4],2))
			+ (pow(p[2],5)*pow(p[1],3) + 10*pow(p[1]*p[2],3)*pow(p[4],2) + 45*p[2]*pow(p[1],3)*pow(p[4],4) + 15*p[9]*pow(p[2]*p[2]*p[1],2)
			+ 90*p[9]*pow(p[1]*p[2]*p[4],2) + 45*p[9]*pow(p[1]*p[4]*p[4],2) + 3*pow(p[2],5)*p[1]*pow(p[3],2) + 30*pow(p[2],3)*p[1]*pow(p[3]*p[4],2)
			+ 60*pow(p[9],2)*pow(p[2],3)*p[1] + 45*p[1]*p[2]*pow(p[4]*p[3]*p[4],2) + 180*pow(p[9],2)*p[1]*p[2]*pow(p[4],2) + 15*p[9]*pow(p[2]*p[2]*p[3],2)
			+ 90*p[9]*pow(p[2]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[2],2) + 45*p[9]*pow(p[4]*p[3]*p[4],2) + 60*pow(p[9],3)*pow(p[4],2)))
			+ (45*p[8]*pow(p[6]*p[5]*p[6],2) + 60*pow(p[8],3)*pow(p[6],2));
	j[20][1] = (1 - p[0])/2*((5*pow(p[2],4)*pow(p[1],3) + 30*pow(p[2]*p[4],2)*pow(p[1],3) + 45*pow(p[1],3)*pow(p[4],4) + 60*p[7]*pow(p[2],3)*pow(p[1],2) + 180*p[7]*p[2]*pow(p[1]*p[4],2)
			+ 15*pow(p[2]*p[2]*p[3],2)*p[1] + 90*pow(p[2]*p[3]*p[4],2)*p[1]+ 180*pow(p[7]*p[2],2)*p[1] + 45*p[1]*pow(p[4]*p[3]*p[4],2) + 180*pow(p[7]*p[4],2)*p[1] + 60*p[7]*pow(p[2],3)*pow(p[3],2)
			+ 180*p[7]*p[2]*pow(p[3]*p[4],2) + 120*pow(p[7],3)*p[2])
			+ (5*pow(p[2],4)*pow(p[1],3) + 30*pow(p[2]*p[4],2)*pow(p[1],3) + 45*pow(p[1],3)*pow(p[4],4) + 60*p[9]*pow(p[2],3)*pow(p[1],2) + 180*p[9]*p[2]*pow(p[1]*p[4],2)
			+ 15*pow(p[2]*p[2]*p[3],2)*p[1] + 90*pow(p[2]*p[3]*p[4],2)*p[1]+ 180*pow(p[9]*p[2],2)*p[1] + 45*p[1]*pow(p[4]*p[3]*p[4],2) + 180*pow(p[9]*p[4],2)*p[1] + 60*p[9]*pow(p[2],3)*pow(p[3],2)
			+ 180*p[9]*p[2]*pow(p[3]*p[4],2) + 120*pow(p[9],3)*p[2]));
	j[20][2] = (1 - p[0])/2*((3*pow(p[2],5)*pow(p[1],2) + 30*pow(p[2],3)*pow(p[1]*p[4],2) + 135*p[2]*pow(p[1]*p[4]*p[4],2) + 30*p[7]*pow(p[2],4)*p[1] + 180*p[1]*p[7]*pow(p[2]*p[4],2)
			+ 90*p[7]*p[1]*pow(p[4],4) + 3*pow(p[2],5)*pow(p[3],2)+ 30*pow(p[2],3)*pow(p[3]*p[4],2) + 60*pow(p[7],2)*pow(p[2],3) + 45*p[2]*pow(p[4]*p[3]*p[4],2) + 180*pow(p[7]*p[4],2)*p[2])
			+ (3*pow(p[2],5)*pow(p[1],2) + 30*pow(p[2],3)*pow(p[1]*p[4],2) + 135*p[2]*pow(p[1]*p[4]*p[4],2) + 30*p[9]*pow(p[2],4)*p[1] + 180*p[1]*p[9]*pow(p[2]*p[4],2)
			+ 90*p[9]*p[1]*pow(p[4],4) + 3*pow(p[2],5)*pow(p[3],2)+ 30*pow(p[2],3)*pow(p[3]*p[4],2) + 60*pow(p[9],2)*pow(p[2],3) + 45*p[2]*pow(p[4]*p[3]*p[4],2) + 180*pow(p[9]*p[4],2)*p[2]));
	j[20][3] = (1 - p[0])/2*((20*pow(p[1]*p[2],3)*p[4] + 180*p[2]*pow(p[1]*p[4],3) + 180*p[7]*pow(p[1]*p[2],2)*p[4] + 180*p[7]*pow(p[1],2)*pow(p[4],3) + 60*pow(p[2],3)*p[1]*pow(p[3],2)*p[4]
			+ 180*p[1]*p[2]*pow(p[3],2)*pow(p[4],3) + 360*pow(p[7],2)*p[1]*p[2]*p[4] + 180*p[7]*pow(p[2]*p[3],2)*p[4] + 180*p[7]*pow(p[4],3)*pow(p[3],2) + 120*pow(p[7],3)*p[4])
			+ (20*pow(p[1]*p[2],3)*p[4] + 180*p[2]*pow(p[1]*p[4],3) + 180*p[9]*pow(p[1]*p[2],2)*p[4] + 180*p[9]*pow(p[1],2)*pow(p[4],3) + 60*pow(p[2],3)*p[1]*pow(p[3],2)*p[4]
			+ 180*p[1]*p[2]*pow(p[3],2)*pow(p[4],3) + 360*pow(p[9],2)*p[1]*p[2]*p[4] + 180*p[9]*pow(p[2]*p[3],2)*p[4] + 180*p[9]*pow(p[4],3)*pow(p[3],2) + 120*pow(p[9],3)*p[4]));
	j[20][4] = (1 - p[0])/2*((6*pow(p[2],5)*p[1]*p[3] + 60*pow(p[2],3)*p[1]*pow(p[4],2)*p[3] + 90*p[1]*p[2]*pow(p[4],4)*p[3]+ 30*p[7]*pow(p[2],4)*p[3] + 180*p[7]*pow(p[2]*p[4],2)*p[3] + 90*p[7]*pow(p[4],4)*p[3])
			+ (6*pow(p[2],5)*p[1]*p[3] + 60*pow(p[2],3)*p[1]*pow(p[4],2)*p[3] + 90*p[1]*p[2]*pow(p[4],4)*p[3]+ 30*p[9]*pow(p[2],4)*p[3] + 180*p[9]*pow(p[2]*p[4],2)*p[4] + 90*p[9]*pow(p[4],4)*p[3]));
	j[20][5] = p[0]*(180*p[8]*pow(p[6],3)*pow(p[5],2) + 120*pow(p[8],3)*p[6]);
	j[20][6] = p[0]*90*p[8]*pow(p[6],4)*p[5];
	j[20][7] = (1 - p[0])/2*(15*pow(p[2]*p[1]*p[2],2) + 90*pow(p[1]*p[2]*p[4],2) + 45*pow(p[1],2)*pow(p[4],4) + 120*p[7]*pow(p[2],3)*p[1] + 360*p[7]*p[1]*p[2]*pow(p[4],2)
			+ 15*pow(p[2]*p[2]*p[3],2) + 90*pow(p[2]*p[3]*p[4],2) + 180*pow(p[7]*p[2],2) + 45*pow(p[4],4)*pow(p[3],2) + 180*pow(p[7]*p[4],2));
	j[20][8] = p[0]*(45*pow(p[6]*p[5]*p[6],2) + 180*pow(p[8]*p[6],2));
	j[20][9] = (1 - p[0])/2*(15*pow(p[2]*p[1]*p[2],2) + 90*pow(p[1]*p[2]*p[4],2) + 45*pow(p[1],2)*pow(p[4],4) + 120*p[9]*pow(p[2],3)*p[1] + 360*p[9]*p[1]*p[2]*pow(p[4],2)
			+ 15*pow(p[2]*p[2]*p[3],2) + 90*pow(p[2]*p[3]*p[4],2) + 180*pow(p[9]*p[2],2) + 45*pow(p[4],4)*pow(p[3],2) + 180*pow(p[9]*p[4],2));
}