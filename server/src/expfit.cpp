/**
 * メモ
 * m_：マトリクス，v_：ベクトル，cf_：係数
 */
#include "../include/expfit.h"
#include "../include/common.h"

MomentEq::MomentEq()
{
    _setObjRange();
}

MomentEq::~MomentEq()
{
    std::vector<double>().swap(_dG);
    std::vector<std::size_t>().swap(_objList);
    std::vector< std::vector<double> >().swap(_objWeight);
}
/**
 * @fn GSLの非線形最小二乗法で使うモーメント方程式の関数値ベクトル
 * @param vector<double> x 方程式のパラメータ (a, μ1, μ2, σ11, σ12, σ21, σ22, ρ1, ρ2, ρ3)
 */
std::vector<double>
MomentEq::expb_f (const std::vector<double> &x)
{
    std::size_t i;

    std::vector<double> cf_moment_eq =                      // モーメント方程式 係数行列 15x21
    {
        0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        -1,-2*Common::ZETA,1,-1*Common::EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,-2,-4*Common::ZETA,0,-2*Common::EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
            
        0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,-1,-2*Common::ZETA,3,0,0,-1*Common::EPSILON,0,0,0,0,0,0,0,0,0,0,0,0,
        _dG[1],0,0,0,-2,-4*Common::ZETA,2,0,0,-2*Common::EPSILON,0,0,0,0,0,0,0,0,0,0,0, 
        0,3*_dG[1],0,0,0,-3,-6*Common::ZETA,1,0,0,-3*Common::EPSILON,0,0,0,0,0,0,0,0,0,0,
        0,0,6*_dG[1],0,0,0,-4,-8*Common::ZETA,0,0,0,-4*Common::EPSILON,0,0,0,0,0,0,0,0,0,

        0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,-1,-2*Common::ZETA,5,0,0,0,0,-1*Common::EPSILON,0,0,0,0,0,
        0,0,0,_dG[1],0,0,0,0,0,-2,-4*Common::ZETA,4,0,0,0,0,-2*Common::EPSILON,0,0,0,0,
        0,0,0,0,3*_dG[1],0,0,0,0,0,-3,-6*Common::ZETA,3,0,0,0,0,-3*Common::EPSILON,0,0,0,
        _dG[3],0,0,0,0,6*_dG[1],0,0,0,0,0,-4,-8*Common::ZETA,2,0,0,0,0,-4*Common::EPSILON,0,0,
        0,5*_dG[3],0,0,0,0,10*_dG[1],0,0,0,0,0,-5,-10*Common::ZETA,1,0,0,0,0,-5*Common::EPSILON,0,
        0,0,15*_dG[3],0,0,0,0,15*_dG[1],0,0,0,0,0,-6,-12*Common::ZETA,0,0,0,0,0,-6*Common::EPSILON
    };

    // モーメント方程式を計算
    std::vector<double> Eg = MomentEq::getMomentFromParameter(x);
    // モーメント方程式の結果を保存するvector
    std::vector<double> v_result_moment_eq(Common::NUM_OF_MOMENTEQ, 0.);
    // モーメント方程式を解く
    gsl_matrix_view m_cf_moment_eq      = gsl_matrix_view_array(&cf_moment_eq[0], Common::NUM_OF_MOMENTEQ, Common::NUM_OF_MOMENT);
    gsl_matrix_view m_moment            = gsl_matrix_view_array(&Eg[0], Common::NUM_OF_MOMENT, 1);
    gsl_matrix_view m_result_moment_eq  = gsl_matrix_view_array(&v_result_moment_eq[0], Common::NUM_OF_MOMENTEQ, 1);
    gsl_blas_dgemm(CblasNoTrans, CblasNoTrans, 1.0, &m_cf_moment_eq.matrix, &m_moment.matrix, 0.0, &m_result_moment_eq.matrix);

    v_result_moment_eq[2]  += _dG[1];
    v_result_moment_eq[7]  += _dG[3];
    v_result_moment_eq[14] += _dG[5];
    
    // 指定した目的関数の値をセット
    std::vector<double> obj;
    obj.reserve(_objList.size());
//    if (_objWeight.size() == 0) {
        for (i = 0; i < _objList.size(); ++i) {
            obj.push_back(v_result_moment_eq[_objList[i]]);
        }
//    } else {
//        for (i = 0; i < _objList.size(); ++i) {
//            obj.push_back((v_result_moment_eq[_objList[i]]-_objWeight[0][_objList[i]]) / _objWeight[1][_objList[i]]);
//            // obj.push_back(v_result_moment_eq[_objList[i]] / _objWeight[1][_objList[i]]);
//        }
//    }
    return obj;
}

/**
 * @fn パラメータ値からモーメント値を得る
 * @param const std::vector<double> &p パラメータ値（a, μ1, μ2, σ11, σ12, σ21, σ22, ρ1, ρ2, ρ3）
 * @param const std::vector<double> &m モーメント値（領域確保済み）
 */
std::vector<double>
MomentEq::getMomentFromParameter(const std::vector<double> &p)
{
    std::vector<double> m(Common::NUM_OF_MOMENT);

    // y_1^2
    std::vector<double> e20(3);
    e20[0] = pow(p[1],2) + pow(p[3],2);
    e20[1] = pow(p[5],2);
    e20[2] = pow(p[1],2) + pow(p[3],2);
    m[0] = (1. - p[0])/2.*(e20[0] + e20[2]) + p[0]*e20[1];
    // y_1*y_2
    std::vector<double> e11(3);
    e11[0] = p[3]*p[4]*p[7] + p[1]*p[2];
    e11[1] = p[5]*p[6]*p[8];
    e11[2] = p[3]*p[4]*p[9] + p[1]*p[2];
//    m[1] = (1. - p[0])/2.*(e11[0] + e11[2]) + p[0]*e11[1];
    m[1] = 0.;
    // y_2^2
    std::vector<double> e02(3);
    e02[0] = pow(p[2],2) + pow(p[4],2);
    e02[1] = pow(p[6],2);
    e02[2] = pow(p[2],2) + pow(p[4],2);
    m[2] = (1. - p[0])/2.*(e02[0] + e02[2]) + p[0]*e02[1];

    // y_1^3
    std::vector<double> e30(3);
    e30[0] = 3.*p[1]*e20[0] - 2.*pow(p[1],3);
    e30[1] = 0.;
    e30[2] = -3.*p[1]*e20[2] + 2.*pow(p[1],3);
    // y_1^2*y_2
    std::vector<double> e21(3);
    e21[0] = p[2]*e20[0] + 2.*p[1]*e11[0] + 2.*pow(p[1],2)*p[2];
    e21[1] = 0.;
    e21[2] = -1.*p[2]*e20[2] - 2.*p[1]*e11[2] - 2.*pow(p[1],2)*p[2];
    // y_1*y_2^2
    std::vector<double> e12(3);
    e12[0] = p[1]*e02[0] + 2.*p[2]*e11[0] + 2.*pow(p[2],2)*p[1];
    e12[1] = 0.;
    e12[2] = -1.*p[1]*e02[2] - 2.*p[2]*e11[2] - 2.*pow(p[2],2)*p[1];
    // y_2^3
    std::vector<double> e03(3);
    e03[0] = 3.*p[2]*e02[0] - 2.*pow(p[2],3);
    e03[1] = 0.;
    e03[2] = -3.*p[2]*e02[2] + 2.*pow(p[2],3);
 
    // y_1^4
    std::vector<double> e40(3);
    e40[0] = 3.*pow(p[3],4) + 4.*p[1]*e30[0] - 6.*pow(p[1],2)*e20[0] + 3.*pow(p[1],4);
    e40[1] = 3.*pow(p[5],4);
    e40[2] = 3.*pow(p[3],4) - 4.*p[1]*e30[2] - 6.*pow(p[1],2)*e20[2] + 3.*pow(p[1],4);
    m[3] = (1. - p[0])/2.*(e40[0] + e40[2]) + p[0]*e40[1];
    // y_1^3*y_2
    std::vector<double> e31(3);
    e31[0] = 3.*pow(p[3],2)*p[3]*p[4]*p[7] + p[2]*e30[0] + 3.*p[1]*e21[0] - 3.*p[1]*p[2]*e20[0] - 3.*pow(p[1],2)*e11[0] + 3.*pow(p[1],3)*p[2];
    e31[1] = 3.*pow(p[5],2)*p[5]*p[6]*p[8];
    e31[2] = 3.*pow(p[3],2)*p[3]*p[4]*p[9] - p[2]*e30[2] - 3.*p[1]*e21[2] - 3.*p[1]*p[2]*e20[2] - 3.*pow(p[1],2)*e11[2] + 3.*pow(p[1],3)*p[2];
//    m[4] = (1. - p[0])/2.*(e31[0] + e31[2]) + p[0]*e31[1];
    m[4] = 0.;
    // y_1^2*y_2^2
    std::vector<double> e22(3);
    e22[0] = pow(p[3]*p[4],2) + 2.*pow(p[3]*p[4]*p[7],2) + 2.*p[2]*e21[0] + 2.*p[1]*e12[0] - pow(p[2],2)*e20[0] - 4.*p[1]*p[2]*e11[0] - pow(p[1],2)*e02[0] + 3.*pow(p[1]*p[2],2);
    e22[1] = pow(p[5]*p[6],2) + 2.*pow(p[5]*p[6]*p[8],2);
    e22[2] = pow(p[3]*p[4],2) + 2.*pow(p[3]*p[4]*p[9],2) - 2.*p[2]*e21[2] - 2.*p[1]*e12[2] - pow(p[2],2)*e20[2] - 4.*p[1]*p[2]*e11[2] - pow(p[1],2)*e02[2] + 3.*pow(p[1]*p[2],2);
    m[5] = (1. - p[0])/2.*(e22[0] + e22[2]) + p[0]*e22[1];
    // y_1*y_2^3
    std::vector<double> e13(3);
    e13[0] = 3.*pow(p[4],2)*p[3]*p[4]*p[7] + p[1]*e03[0] + 3.*p[2]*e12[0] - 3.*p[1]*p[2]*e02[0] - 3.*pow(p[2],2)*e11[0] + 3.*pow(p[2],3)*p[1];
    e13[1] = 3.*pow(p[6],2)*p[5]*p[6]*p[8];
    e13[2] = 3.*pow(p[4],2)*p[3]*p[4]*p[9] - p[1]*e03[2] - 3.*p[2]*e12[2] - 3.*p[1]*p[2]*e02[2] - 3.*pow(p[2],2)*e11[2] + 3.*pow(p[2],3)*p[1];
    m[6] = (1. - p[0])/2.*(e13[0] + e13[2]) + p[0]*e13[1];
    // y_2^4
    std::vector<double> e04(3);
    e04[0] = 3.*pow(p[4],4) + 4.*p[2]*e03[0] - 6.*pow(p[2],2)*e02[0] + 3.*pow(p[2],4);
    e04[1] = 3.*pow(p[6],4);
    e04[2] = 3.*pow(p[4],4) - 4.*p[2]*e03[2] - 6.*pow(p[2],2)*e02[2] + 3.*pow(p[2],4);
    m[7] = (1. - p[0])/2.*(e04[0] + e04[2]) + p[0]*e04[1];

    // y_1^5
    std::vector<double> e50(3);
    e50[0] = 5.*p[1]*e40[0] - 10.*pow(p[1],2)*e30[0] + 10.*pow(p[1],3)*e20[0] - 4.*pow(p[1],5);
    e50[1] = 0.;
    e50[2] = -5.*p[1]*e40[2] - 10.*pow(p[1],2)*e30[2] - 10.*pow(p[1],3)*e20[2] + 4.*pow(p[1],5);
    // y_1^4*y_2
    std::vector<double> e41(3);
    e41[0] = p[2]*e40[0] + 4.*p[1]*e31[0] - 4.*p[1]*p[2]*e30[0] - 6.*pow(p[1],2)*e21[0] + 6.*pow(p[1],2)*p[2]*e20[0] + 4.*pow(p[1],3)*e11[0] - 4.*pow(p[1],4)*p[2];
    e41[1] = 0.;
    e41[2] = -1.*p[2]*e40[2] - 4.*p[1]*e31[2] - 4.*p[1]*p[2]*e30[2] - 6.*pow(p[1],2)*e21[2] - 6.*pow(p[1],2)*p[2]*e20[2] - 4.*pow(p[1],3)*e11[2] + 4.*pow(p[1],4)*p[2];
    // y_1^3*y_2^2
    std::vector<double> e32(3);
    e32[0] = 2.*p[2]*e31[0] + 3.*p[1]*e22[0] - pow(p[2],2)*e30[0] - 6.*p[1]*p[2]*e21[0] - 3.*pow(p[2],2)*e12[0] + 3.*p[1]*pow(p[2],2)*e20[0] + 6.*pow(p[1],2)*p[2]*e11[0] + pow(p[1],3)*e02[0] - 4.*pow(p[1],3)*pow(p[2],2);
    e32[1] = 0.;
    e32[2] = -2.*p[2]*e31[2] - 3.*p[1]*e22[2] - pow(p[2],2)*e30[2] - 6.*p[1]*p[2]*e21[2] - 3.*pow(p[2],2)*e12[2] - 3.*p[1]*pow(p[2],2)*e20[2] - 6.*pow(p[1],2)*p[2]*e11[2] - pow(p[1],3)*e02[2] + 4.*pow(p[1],3)*pow(p[2],2);
    // y_1^2*y_2^3
    std::vector<double> e23(3);
    e23[0] = 2.*p[1]*e13[0] + 3.*p[2]*e22[0] - pow(p[1],2)*e03[0] - 6.*p[1]*p[2]*e12[0] - 3.*pow(p[1],2)*e21[0] + 3.*p[2]*pow(p[1],2)*e02[0] + 6.*pow(p[2],2)*p[1]*e11[0] + pow(p[2],3)*e20[0] - 4.*pow(p[2],3)*pow(p[1],2);
    e23[1] = 0.;
    e23[2] = -2.*p[1]*e13[2] - 3.*p[2]*e22[2] - pow(p[1],2)*e03[2] - 6.*p[1]*p[2]*e12[2] - 3.*pow(p[1],2)*e21[2] - 3.*p[2]*pow(p[1],2)*e02[2] - 6.*pow(p[2],2)*p[1]*e11[2] - pow(p[2],3)*e20[2] + 4.*pow(p[2],3)*pow(p[1],2);
    // y_1*y_2^4
    std::vector<double> e14(3);
    e14[0] = p[1]*e04[0] + 4.*p[2]*e13[0] - 4.*p[1]*p[2]*e03[0] - 6.*pow(p[2],2)*e12[0] + 6.*pow(p[2],2)*p[1]*e02[0] + 4.*pow(p[2],3)*e11[0] - 4.*pow(p[2],4)*p[1];
    e14[1] = 0.;
    e14[2] = -1.*p[1]*e04[2] - 4.*p[2]*e13[2] - 4.*p[1]*p[2]*e03[2] - 6.*pow(p[2],2)*e12[2] - 6.*pow(p[2],2)*p[1]*e02[2] - 4.*pow(p[2],3)*e11[2] + 4.*pow(p[2],4)*p[1];
    // y_2^5
    std::vector<double> e05(3);
    e05[0] = 5.*p[2]*e04[0] - 10.*pow(p[2],2)*e03[0] + 10.*pow(p[2],3)*e02[0] - 4.*pow(p[2],5);
    e05[1] = 0.;
    e05[2] = -5.*p[2]*e04[2] - 10.*pow(p[2],2)*e03[2] - 10.*pow(p[2],3)*e02[2] + 4.*pow(p[2],5);

    // y_1^6
    std::vector<double> e60(3);
    e60[0] = 15.*pow(p[3],6) + 6.*p[1]*e50[0] - 15.*pow(p[1],2)*e40[0] + 20.*pow(p[1],3)*e30[0] - 15.*pow(p[1],4)*e20[0] + 5.*pow(p[1],6);
    e60[1] = 15.*pow(p[5],6);
    e60[2] = 15.*pow(p[3],6) - 6.*p[1]*e50[2] - 15.*pow(p[1],2)*e40[2] - 20.*pow(p[1],3)*e30[2] - 15.*pow(p[1],4)*e20[0] + 5.*pow(p[1],6);
    m[8] = (1. - p[0])/2.*(e60[0] + e60[2]) + p[0]*e60[1];
    // y_1^5*y_2
    std::vector<double> e51(3);
    e51[0] = 15.*pow(p[3],4)*p[3]*p[4]*p[7] + p[2]*e50[0] + 5.*p[1]*e41[0] - 5.*p[1]*p[2]*e40[0] - 10.*pow(p[1],2)*e31[0] + 10.*pow(p[1],2)*p[2]*e30[0] + 10.*pow(p[1],3)*e21[0] - 10.*pow(p[1],3)*p[2]*e20[0] - 5.*pow(p[1],4)*e11[0] + 5.*pow(p[1],5)*p[2];
    e51[1] = 15.*pow(p[5],4)*p[5]*p[6]*p[8];
    e51[2] = 15.*pow(p[3],4)*p[3]*p[4]*p[9] - p[2]*e50[2] - 5.*p[1]*e41[2] - 5.*p[1]*p[2]*e40[2] - 10.*pow(p[1],2)*e31[2] - 10.*pow(p[1],2)*p[2]*e30[2] - 10.*pow(p[1],3)*e21[2] - 10.*pow(p[1],3)*p[2]*e20[2] - 5.*pow(p[1],4)*e11[2] + 5.*pow(p[1],5)*p[2];
//    m[9] = (1. - p[0])/2.*(e51[0] + e51[2]) + p[0]*e51[1];
    m[9] = 0.;
    // y_1^4*y_2^2
    std::vector<double> e42(3);
    e42[0] = 3.*pow(p[3],4)*pow(p[4],2) + 12.*pow(p[3]*p[4]*p[7],2)*pow(p[3],2) + 2.*p[2]*e41[0] + 4.*p[1]*e32[0] - pow(p[2],2)*e40[0] - 8.*p[1]*p[2]*e31[0] - 6.*pow(p[1],2)*e22[0] + 4.*p[1]*pow(p[2],2)*e30[0] + 12.*pow(p[1],2)*p[2]*e21[0] + 4.*pow(p[1],3)*e12[0] - 6.*pow(p[1]*p[2],2)*e20[0] - 8.*pow(p[1],3)*p[2]*e11[0] - pow(p[1],4)*e02[0] + 5.*pow(p[1],4)*pow(p[2],2);
    e42[1] = 3.*pow(p[5],4)*pow(p[6],2) + 12.*pow(p[5]*p[6]*p[8],2)*pow(p[5],2);
    e42[2] = 3.*pow(p[3],4)*pow(p[4],2) + 12.*pow(p[3]*p[4]*p[9],2)*pow(p[3],2) - 2.*p[2]*e41[2] - 4.*p[1]*e32[2] - pow(p[2],2)*e40[2] - 8.*p[1]*p[2]*e31[2] - 6.*pow(p[1],2)*e22[2] - 4.*p[1]*pow(p[2],2)*e30[2] - 12.*pow(p[1],2)*p[2]*e21[2] - 4.*pow(p[1],3)*e12[2] - 6.*pow(p[1]*p[2],2)*e20[2] - 8.*pow(p[1],3)*p[2]*e11[2] - pow(p[1],4)*e02[2] + 5.*pow(p[1],4)*pow(p[2],2);
    m[10] = (1. - p[0])/2.*(e42[0] + e42[2]) + p[0]*e42[1];
    // y_1^3*y_2^3
    std::vector<double> e33(3);
    e33[0] = 6.*pow(p[3]*p[4]*p[7],3) + 9.*p[3]*p[4]*p[7]*pow(p[3]*p[4],2) + 3.*p[2]*e32[0] + 3.*p[1]*e23[0] - 3.*pow(p[2],2)*e31[0] - 9.*p[1]*p[2]*e22[0] - 3.*pow(p[1],2)*e13[0] + pow(p[2],3)*e30[0] + 9.*p[1]*pow(p[2],2)*e21[0] + 9.*pow(p[1],2)*p[2]*e12[0] + pow(p[1],3)*e03[0] - 3.*p[1]*pow(p[2],3)*e20[0] - 9.*pow(p[1]*p[2],2)*e11[0] - 3.*pow(p[1],3)*p[2]*e02[0] + 5.*pow(p[1]*p[2],3);
    e33[1] = 6.*pow(p[5]*p[6]*p[8],3) + 9.*p[5]*p[6]*p[8]*pow(p[5]*p[6],2);
    e33[2] = 6.*pow(p[3]*p[4]*p[9],3) + 9.*p[3]*p[4]*p[9]*pow(p[3]*p[4],2) - 3.*p[2]*e32[2] - 3.*p[1]*e23[2] - 3.*pow(p[2],2)*e31[2] - 9.*p[1]*p[2]*e22[2] - 3.*pow(p[1],2)*e13[2] - pow(p[2],3)*e30[2] - 9.*p[1]*pow(p[2],2)*e21[2] - 9.*pow(p[1],2)*p[2]*e12[2] - pow(p[1],3)*e03[2] - 3.*p[1]*pow(p[2],3)*e20[2] - 9.*pow(p[1]*p[2],2)*e11[2] - 3.*pow(p[1],3)*p[2]*e02[2] + 5.*pow(p[1]*p[2],3);
    m[11] = (1. - p[0])/2.*(e33[0] + e33[2]) + p[0]*e33[1];
    // y_1^2*y_2^4
    std::vector<double> e24(3);
    e24[0] = 3.*pow(p[4],4)*pow(p[3],2) + 12.*pow(p[3]*p[4]*p[7],2)*pow(p[4],2) + 2.*p[1]*e14[0] + 4.*p[2]*e23[0] - pow(p[1],2)*e04[0] - 8.*p[1]*p[2]*e13[0] - 6.*pow(p[2],2)*e22[0] + 4.*p[2]*pow(p[1],2)*e03[0] + 12.*pow(p[2],2)*p[1]*e12[0] + 4.*pow(p[2],3)*e21[0] - 6.*pow(p[1]*p[2],2)*e02[0] - 8.*pow(p[2],3)*p[1]*e11[0] - pow(p[2],4)*e20[0] + 5.*pow(p[2],4)*pow(p[1],2);
    e24[1] = 3.*pow(p[6],4)*pow(p[5],2) + 12.*pow(p[5]*p[6]*p[8],2)*pow(p[6],2);
    e24[2] = 3.*pow(p[4],4)*pow(p[3],2) + 12.*pow(p[3]*p[4]*p[9],2)*pow(p[4],2) - 2.*p[1]*e14[2] - 4.*p[2]*e23[2] - pow(p[1],2)*e04[2] - 8.*p[1]*p[2]*e13[2] - 6.*pow(p[2],2)*e22[2] - 4.*p[2]*pow(p[1],2)*e03[2] - 12.*pow(p[2],2)*p[1]*e12[2] - 4.*pow(p[2],3)*e21[2] - 6.*pow(p[1]*p[2],2)*e02[2] - 8.*pow(p[2],3)*p[1]*e11[2] - pow(p[2],4)*e20[2] + 5.*pow(p[2],4)*pow(p[1],2);
    m[12] = (1. - p[0])/2.*(e24[0] + e24[2]) + p[0]*e24[1];
    // y_1*y_2^5
    std::vector<double> e15(3);
    e15[0] = 15.*pow(p[4],4)*p[3]*p[4]*p[7] + p[1]*e05[0] + 5.*p[2]*e14[0] - 5.*p[1]*p[2]*e04[0] - 10.*pow(p[2],2)*e13[0] + 10.*pow(p[2],2)*p[1]*e03[0] + 10.*pow(p[2],3)*e12[0] - 10.*pow(p[2],3)*p[1]*e02[0] - 5.*pow(p[2],4)*e11[0] + 5.*pow(p[2],5)*p[1];
    e15[1] = 15.*pow(p[6],4)*p[5]*p[6]*p[8];
    e15[2] = 15.*pow(p[4],4)*p[3]*p[4]*p[9] - p[1]*e05[2] - 5.*p[2]*e14[2] - 5.*p[1]*p[2]*e04[2] - 10.*pow(p[2],2)*e13[2] - 10.*pow(p[2],2)*p[1]*e03[2] - 10.*pow(p[2],3)*e12[2] - 10.*pow(p[2],3)*p[1]*e02[2] - 5.*pow(p[2],4)*e11[2] + 5.*pow(p[2],5)*p[1];
    m[13] = (1. - p[0])/2.*(e15[0] + e15[2]) + p[0]*e15[1];
    // y_2^6
    std::vector<double> e06(3);
    e06[0] = 15.*pow(p[4],6) + 6.*p[2]*e05[0] - 15.*pow(p[2],2)*e04[0] + 20.*pow(p[2],3)*e03[0] - 15.*pow(p[2],4)*e02[0] + 5.*pow(p[2],6);
    e06[1] = 15.*pow(p[6],6);
    e06[2] = 15.*pow(p[4],6) - 6.*p[2]*e05[2] - 15.*pow(p[2],2)*e04[2] - 20.*pow(p[2],3)*e03[2] - 15.*pow(p[2],4)*e02[0] + 5.*pow(p[2],6);
    m[14] = (1. - p[0])/2.*(e06[0] + e06[2]) + p[0]*e06[1];

    // y_1^7
    std::vector<double> e70(3);
    e70[0] = 7.*p[1]*e60[0] - 21.*pow(p[1],2)*e50[0] + 35.*pow(p[1],3)*e40[0] - 35.*pow(p[1],4)*e30[0] + 21.*pow(p[1],5)*e20[0] - 6.*pow(p[1],7);
    e70[1] = 0.;
    e70[2] = -7.*p[1]*e60[2] - 21.*pow(p[1],2)*e50[2] - 35.*pow(p[1],3)*e40[2] - 35.*pow(p[1],4)*e30[2] - 21.*pow(p[1],5)*e20[2] + 6.*pow(p[1],7);
    // y_1^6*y_2
    std::vector<double> e61(3);
    e61[0] = p[2]*e60[0] + 6.*p[1]*e51[0] - 6.*p[1]*p[2]*e50[0] - 15.*pow(p[1],2)*e41[0] + 15.*pow(p[1],2)*p[2]*e40[0] + 20.*pow(p[1],3)*e31[0] - 20.*pow(p[1],3)*p[2]*e30[0] - 15.*pow(p[1],4)*e21[0] + 15.*pow(p[1],4)*p[2]*e20[0] + 6.*pow(p[1],5)*e11[0] - 6.*pow(p[1],6)*p[2];
    e61[1] = 0.;
    e61[2] = -1.*p[2]*e60[2] - 6.*p[1]*e51[2] - 6.*p[1]*p[2]*e50[2] - 15.*pow(p[1],2)*e41[2] - 15.*pow(p[1],2)*p[2]*e40[2] - 20.*pow(p[1],3)*e31[2] - 20.*pow(p[1],3)*p[2]*e30[2] - 15.*pow(p[1],4)*e21[2] - 15.*pow(p[1],4)*p[2]*e20[2] - 6.*pow(p[1],5)*e11[2] + 6.*pow(p[1],6)*p[2];
    // y_1^5*y_2^2
    std::vector<double> e52(3);
    e52[0] = 2.*p[2]*e51[0] + 5.*p[1]*e42[0] - pow(p[2],2)*e50[0] - 10.*p[1]*p[2]*e41[0] - 10.*pow(p[1],2)*e32[0] + 5.*p[1]*pow(p[2],2)*e40[0] + 20.*pow(p[1],2)*p[2]*e31[0] + 10.*pow(p[1],3)*e22[0] - 10.*pow(p[1]*p[2],2)*e30[0] - 20.*pow(p[1],3)*p[2]*e21[0] - 5.*pow(p[1],4)*e12[0] + 10.*pow(p[1],3)*pow(p[2],2)*e20[0] + 10.*pow(p[1],4)*p[2]*e11[0] + pow(p[1],5)*e02[0] - 6.*pow(p[1],5)*pow(p[2],2);
    e52[1] = 0.;
    e52[2] = -2.*p[2]*e51[2] - 5.*p[1]*e42[2] - pow(p[2],2)*e50[2] - 10.*p[1]*p[2]*e41[2] - 10.*pow(p[1],2)*e32[2] - 5.*p[1]*pow(p[2],2)*e40[2] - 20.*pow(p[1],2)*p[2]*e31[2] - 10.*pow(p[1],3)*e22[2] - 10.*pow(p[1]*p[2],2)*e30[2] - 20.*pow(p[1],3)*p[2]*e21[2] - 5.*pow(p[1],4)*e12[2] - 10.*pow(p[1],3)*pow(p[2],2)*e20[2] - 10.*pow(p[1],4)*p[2]*e11[2] - pow(p[1],5)*e02[2] + 6.*pow(p[1],5)*pow(p[2],2);
    // y_1^4*y_2^3
    std::vector<double> e43(3);
    e43[0] = 3.*p[2]*e42[0] + 4.*p[1]*e33[0] - 3.*pow(p[2],2)*e41[0] - 12.*p[1]*p[2]*e32[0] - 6.*pow(p[1],2)*e23[0] + pow(p[2],3)*e40[0] + 12.*p[1]*pow(p[2],2)*e31[0] + 18.*pow(p[1],2)*p[2]*e22[0] + 4.*pow(p[1],3)*e13[0] - 4.*p[1]*pow(p[2],3)*e30[0] - 18.*pow(p[1]*p[2],2)*e21[0] - 12.*pow(p[1],3)*p[2]*e12[0] - pow(p[1],4)*e03[0] + 6.*pow(p[1],2)*pow(p[2],3)*e20[0] + 12.*pow(p[1],3)*pow(p[2],2)*e11[0] + 3.*pow(p[1],4)*p[2]*e02[0] - 6.*pow(p[1],4)*pow(p[2],3);
    e43[1] = 0.;
    e43[2] = -3.*p[2]*e42[2] - 4.*p[1]*e33[2] - 3.*pow(p[2],2)*e41[2] - 12.*p[1]*p[2]*e32[2] - 6.*pow(p[1],2)*e23[2] - pow(p[2],3)*e40[2] - 12.*p[1]*pow(p[2],2)*e31[2] - 18.*pow(p[1],2)*p[2]*e22[2] - 4.*pow(p[1],3)*e13[2] - 4.*p[1]*pow(p[2],3)*e30[2] - 18.*pow(p[1]*p[2],2)*e21[2] - 12.*pow(p[1],3)*p[2]*e12[2] - pow(p[1],4)*e03[2] - 6.*pow(p[1],2)*pow(p[2],3)*e20[2] - 12.*pow(p[1],3)*pow(p[2],2)*e11[2] - 3.*pow(p[1],4)*p[2]*e02[2] + 6.*pow(p[1],4)*pow(p[2],3);
    // y_1^3*y_2^4
    std::vector<double> e34(3);
    e34[0] = 3.*p[1]*e24[0] + 4.*p[2]*e33[0] - 3.*pow(p[1],2)*e14[0] - 12.*p[1]*p[2]*e23[0] - 6.*pow(p[2],2)*e32[0] + pow(p[1],3)*e04[0] + 12.*p[2]*pow(p[1],2)*e13[0] + 18.*pow(p[2],2)*p[1]*e22[0] + 4.*pow(p[2],3)*e31[0] - 4.*p[2]*pow(p[1],3)*e03[0] - 18.*pow(p[1]*p[2],2)*e12[0] - 12.*pow(p[2],3)*p[1]*e21[0] - pow(p[2],4)*e30[0] + 6.*pow(p[2],2)*pow(p[1],3)*e02[0] + 12.*pow(p[2],3)*pow(p[1],2)*e11[0] + 3.*pow(p[2],4)*p[1]*e20[0] - 6.*pow(p[2],4)*pow(p[1],3);
    e34[1] = 0.;
    e34[2] = -3.*p[1]*e24[2] - 4.*p[2]*e33[2] - 3.*pow(p[1],2)*e14[2] - 12.*p[1]*p[2]*e23[2] - 6.*pow(p[2],2)*e32[2] - pow(p[1],3)*e04[2] - 12.*p[2]*pow(p[1],2)*e13[2] - 18.*pow(p[2],2)*p[1]*e22[2] - 4.*pow(p[2],3)*e31[2] - 4.*p[2]*pow(p[1],3)*e03[2] - 18.*pow(p[1]*p[2],2)*e12[2] - 12.*pow(p[2],3)*p[1]*e21[2] - pow(p[2],4)*e30[2] - 6.*pow(p[2],2)*pow(p[1],3)*e02[2] - 12.*pow(p[2],3)*pow(p[1],2)*e11[2] - 3.*pow(p[2],4)*p[1]*e20[2] + 6.*pow(p[2],4)*pow(p[1],3);
    // y_1^2*y_2^5
    std::vector<double> e25(3);
    e25[0] = 2.*p[1]*e15[0] + 5.*p[2]*e24[0] - pow(p[1],2)*e05[0] - 10.*p[1]*p[2]*e14[0] - 10.*pow(p[2],2)*e23[0] + 5.*p[2]*pow(p[1],2)*e04[0] + 20.*pow(p[2],2)*p[1]*e13[0] + 10.*pow(p[2],3)*e22[0] - 10.*pow(p[1]*p[2],2)*e03[0] - 20.*pow(p[2],3)*p[1]*e12[0] - 6.*pow(p[2],4)*e21[0] + 10.*pow(p[2],3)*pow(p[1],2)*e02[0] + 10.*pow(p[2],4)*p[1]*e11[0] + pow(p[2],5)*e20[0] - 6.*pow(p[2],5)*pow(p[1],2);
    e25[1] = 0.;
    e25[2] = -2.*p[1]*e15[2] - 5.*p[2]*e24[2] - pow(p[1],2)*e05[2] - 10.*p[1]*p[2]*e14[2] - 10.*pow(p[2],2)*e23[2] - 5.*p[2]*pow(p[1],2)*e04[2] - 20.*pow(p[2],2)*p[1]*e13[2] - 10.*pow(p[2],3)*e22[2] - 10.*pow(p[1]*p[2],2)*e03[2] - 20.*pow(p[2],3)*p[1]*e12[2] - 6.*pow(p[2],4)*e21[2] - 10.*pow(p[2],3)*pow(p[1],2)*e02[2] - 10.*pow(p[2],4)*p[1]*e11[2] - pow(p[2],5)*e20[2] + 6.*pow(p[2],5)*pow(p[1],2);
    // y_1*y_2^6
    std::vector<double> e16(3);
    e16[0] = p[1]*e06[0] + 6.*p[2]*e15[0] - 6.*p[1]*p[2]*e05[0] - 15.*pow(p[2],2)*e14[0] + 15.*pow(p[2],2)*p[1]*e04[0] + 20.*pow(p[2],3)*e13[0] - 20.*pow(p[2],3)*p[1]*e03[0] - 15.*pow(p[2],4)*e12[0] + 15.*pow(p[2],4)*p[1]*e02[0] + 6.*pow(p[2],5)*e11[0] - 6.*pow(p[2],6)*p[1];
    e16[1] = 0.;
    e16[2] = -1.*p[1]*e06[2] - 6.*p[2]*e15[2] - 6.*p[1]*p[2]*e05[2] - 15.*pow(p[2],2)*e14[2] - 15.*pow(p[2],2)*p[1]*e04[2] - 20.*pow(p[2],3)*e13[2] - 20.*pow(p[2],3)*p[1]*e03[2] - 15.*pow(p[2],4)*e12[2] - 15.*pow(p[2],4)*p[1]*e02[2] - 6.*pow(p[2],5)*e11[2] + 6.*pow(p[2],6)*p[1];
    // y_2^7
    std::vector<double> e07(3);
    e07[0] = 7.*p[2]*e06[0] - 21.*pow(p[2],2)*e05[0] + 35.*pow(p[2],3)*e04[0] - 35.*pow(p[2],4)*e03[0] + 21.*pow(p[2],5)*e02[0] - 6.*pow(p[2],7);
    e07[1] = 0.;
    e07[2] = -7.*p[2]*e06[2] - 21.*pow(p[2],2)*e05[2] - 35.*pow(p[2],3)*e04[2] - 35.*pow(p[2],4)*e03[2] - 21.*pow(p[2],5)*e02[2] + 6.*pow(p[2],7);

    // y_1^8
    std::vector<double> e80(3);
    e80[0] = 105.*pow(p[3],8) + 8.*p[1]*e70[0] - 28.*pow(p[1],2)*e60[0] + 56.*pow(p[1],3)*e50[0] - 70.*pow(p[1],4)*e40[0] + 56.*pow(p[1],5)*e30[0] - 28.*pow(p[1],6)*e20[0] + 7.*pow(p[1],8);
    e80[1] = 105.*pow(p[5],8);
    e80[2] = 105.*pow(p[3],8) - 8.*p[1]*e70[2] - 28.*pow(p[1],2)*e60[2] - 56.*pow(p[1],3)*e50[2] - 70.*pow(p[1],4)*e40[2] - 56.*pow(p[1],5)*e30[2] - 28.*pow(p[1],6)*e20[2] + 7.*pow(p[1],8);
    m[15] = (1. - p[0])/2.*(e80[0] + e80[2]) + p[0]*e80[1];
    // y_1^7*y_2
    std::vector<double> e71(3);
    e71[0] = 105.*pow(p[1],6)*p[3]*p[4]*p[7] + p[2]*e70[0] + 7.*p[1]*e61[0] - 7.*p[1]*p[2]*e60[0] - 21.*pow(p[1],2)*e51[0] + 21.*pow(p[1],2)*p[2]*e50[0] + 35.*pow(p[1],3)*e41[0] - 35.*pow(p[1],3)*p[2]*e40[0] - 35.*pow(p[1],4)*e31[0] + 35.*pow(p[1],4)*p[2]*e30[0] + 21.*pow(p[1],5)*e21[0] - 21.*pow(p[1],5)*p[2]*e20[0] - 7.*pow(p[1],6)*e11[0] + 7.*pow(p[1],7)*p[2];
    e71[1] = 105.*p[5]*p[6]*p[8]*pow(p[5],6);
    e71[2] = 105.*pow(p[1],6)*p[3]*p[4]*p[9] - p[2]*e70[0] - 7.*p[1]*e61[2] - 7.*p[1]*p[2]*e60[2] - 21.*pow(p[1],2)*e51[2] - 21.*pow(p[1],2)*p[2]*e50[2] - 35.*pow(p[1],3)*e41[2] - 35.*pow(p[1],3)*p[2]*e40[2] - 35.*pow(p[1],4)*e31[2] - 35.*pow(p[1],4)*p[2]*e30[2] - 21.*pow(p[1],5)*e21[2] - 21.*pow(p[1],5)*p[2]*e20[2] - 7.*pow(p[1],6)*e11[2] + 7.*pow(p[1],7)*p[2];
    m[16] = (1. - p[0])/2.*(e71[0] + e71[2]) + p[0]*e71[1];
    // y_1^6y_2^2
    std::vector<double> e62(3);
    e62[0] = 15.*pow(p[3],6)*pow(p[4],2) + 90.*pow(p[3],4)*pow(p[3]*p[4]*p[7],2) + 2.*p[2]*e61[0] + 6.*p[1]*e52[0] - pow(p[1],2)*e60[0] - 12.*p[1]*p[2]*e51[0] - 15.*pow(p[1],2)*e42[0] + 6.*p[1]*pow(p[2],2)*e50[0] + 30.*pow(p[1],2)*p[2]*e41[0] + 20.*pow(p[1],3)*e32[0] - 15.*pow(p[1]*p[2],2)*e40[0] - 40.*pow(p[1],3)*p[2]*e31[0] - 15.*pow(p[1],4)*e22[0] + 20.*pow(p[1],3)*pow(p[2],2)*e30[0] + 30.*pow(p[1],4)*p[2]*e21[0] + 6.*pow(p[1],5)*e12[0] - 15.*pow(p[1],4)*pow(p[2],2)*e20[0] - 12.*pow(p[1],5)*p[2]*e11[0] - pow(p[1],6)*e02[0] + 7.*pow(p[1],6)*pow(p[2],2);
    e62[1] = 15.*pow(p[5],6)*pow(p[6],2) + 90.*pow(p[5],4)*pow(p[5]*p[6]*p[8],2);
    e62[2] = 15.*pow(p[3],6)*pow(p[4],2) + 90.*pow(p[3],4)*pow(p[3]*p[4]*p[9],2) - 2.*p[2]*e61[2] - 6.*p[1]*e52[2] - pow(p[1],2)*e60[2] - 12.*p[1]*p[2]*e51[2] - 15.*pow(p[1],2)*e42[2] - 6.*p[1]*pow(p[2],2)*e50[2] - 30.*pow(p[1],2)*p[2]*e41[2] - 20.*pow(p[1],3)*e32[2] - 15.*pow(p[1]*p[2],2)*e40[2] - 40.*pow(p[1],3)*p[2]*e31[2] - 15.*pow(p[1],4)*e22[2] - 20.*pow(p[1],3)*pow(p[2],2)*e30[2] - 30.*pow(p[1],4)*p[2]*e21[2] - 6.*pow(p[1],5)*e12[2] - 15.*pow(p[1],4)*pow(p[2],2)*e20[2] - 12.*pow(p[1],5)*p[2]*e11[2] - pow(p[1],6)*e02[2] + 7.*pow(p[1],6)*pow(p[2],2);
    m[17] = (1. - p[0])/2.*(e62[0] + e62[2]) + p[0]*e62[1];
    // y_1^5*y_2^3
    std::vector<double> e53(3);
    e53[0] = 45.*pow(p[3],4)*pow(p[4],2)*p[3]*p[4]*p[7] + 60.*pow(p[3]*p[4]*p[7],3)*pow(p[3],2) + 3.*p[2]*e52[0] + 5.*p[1]*e43[0] - 3.*pow(p[2],2)*e51[0] - 15.*p[1]*p[2]*e42[0] - 10.*pow(p[1],2)*e33[0] + pow(p[2],3)*e50[0] + 15.*p[1]*pow(p[2],2)*e41[0] + 30.*pow(p[1],2)*p[2]*e32[0] + 10.*pow(p[1],3)*e23[0] - 5.*p[1]*pow(p[2],3)*e40[0] - 3.*pow(p[1]*p[2],2)*e31[0] - 30.*pow(p[1],3)*p[2]*e22[0] - 5.*pow(p[1],4)*e13[0] + 10.*pow(p[1],2)*pow(p[2],3)*e30[0] + 30.*pow(p[1],3)*pow(p[2],2)*e21[0] + 15.*pow(p[1],4)*p[2]*e12[0] + pow(p[1],5)*e03[0] - 10.*pow(p[1]*p[2],3)*e20[0] - 15.*pow(p[1],4)*pow(p[2],2)*e11[0] - 3.*pow(p[1],5)*p[2]*e02[0] + 7.*pow(p[1],5)*pow(p[2],3);
    e53[1] = 45.*pow(p[5],4)*pow(p[6],2)*p[5]*p[6]*p[8] + 60.*pow(p[5]*p[6]*p[8],3)*pow(p[5],2);
    e53[2] = 45.*pow(p[3],4)*pow(p[4],2)*p[3]*p[4]*p[9] + 60.*pow(p[3]*p[4]*p[9],3)*pow(p[3],2) - 3.*p[2]*e52[2] - 5.*p[1]*e43[2] - 3.*pow(p[2],2)*e51[2] - 15.*p[1]*p[2]*e42[2] - 10.*pow(p[1],2)*e33[2] - pow(p[2],3)*e50[2] - 15.*p[1]*pow(p[2],2)*e41[2] - 30.*pow(p[1],2)*p[2]*e32[2] - 10.*pow(p[1],3)*e23[2] - 5.*p[1]*pow(p[2],3)*e40[2] - 3.*pow(p[1]*p[2],2)*e31[2] - 30.*pow(p[1],3)*p[2]*e22[2] - 5.*pow(p[1],4)*e13[2] - 10.*pow(p[1],2)*pow(p[2],3)*e30[2] - 30.*pow(p[1],3)*pow(p[2],2)*e21[2] - 15.*pow(p[1],4)*p[2]*e12[2] - pow(p[1],5)*e03[2] - 10.*pow(p[1]*p[2],3)*e20[2] - 15.*pow(p[1],4)*pow(p[2],2)*e11[2] - 3.*pow(p[1],5)*p[2]*e02[2] + 7.*pow(p[1],5)*pow(p[2],3);
    m[18] = (1. - p[0])/2.*(e53[0] + e53[2]) + p[0]*e53[1];
    // y_1^4*y_2*^4
    std::vector<double> e44(3);
    e44[0] = 9.*pow(p[3]*p[4],4) + 72.*pow(p[3]*p[4]*p[7]*p[3]*p[4],2) + 24.*pow(p[3]*p[4]*p[7],4) + 4.*p[2]*e43[0] + 4.*p[1]*e34[0] - 6.*pow(p[2],2)*e42[0] - 16.*p[1]*p[2]*e33[0] - 6.*pow(p[1],2)*e24[0] + 4.*pow(p[2],3)*e41[0] + 24.*p[1]*pow(p[2],2)*e32[0] + 24.*pow(p[1],2)*p[2]*e23[0] + 4.*pow(p[1],3)*e14[0] - pow(p[2],4)*e40[0] - 16.*p[1]*pow(p[2],3)*e31[0] - 36.*pow(p[1]*p[2],2)*e22[0] - 16.*pow(p[1],3)*p[2]*e13[0] - pow(p[1],4)*e04[0] + 4.*p[1]*pow(p[2],4)*e30[0] + 24.*pow(p[1],2)*pow(p[3],3)*e21[0] + 24.*pow(p[1],3)*pow(p[2],2)*e12[0] + 4.*pow(p[1],4)*p[2]*e03[0] - 6.*pow(p[1],2)*pow(p[2],4)*e20[0] - 16.*pow(p[1]*p[2],3)*e11[0] - 6.*pow(p[1],4)*pow(p[2],2)*e02[0] + 7.*pow(p[1]*p[2],4);
    e44[1] = 9.*pow(p[5]*p[6],4) + 72.*pow(p[5]*p[6]*p[8]*p[5]*p[6],2) + 24.*pow(p[5]*p[6]*p[8],4);
    e44[2] = 9.*pow(p[3]*p[4],4) + 72.*pow(p[3]*p[4]*p[9]*p[3]*p[4],2) + 24.*pow(p[3]*p[4]*p[9],4) - 4.*p[2]*e43[2] - 4.*p[1]*e34[2] - 6.*pow(p[2],2)*e42[2] - 16.*p[1]*p[2]*e33[0] - 6.*pow(p[1],2)*e24[2] - 4.*pow(p[2],3)*e41[2] - 24.*p[1]*pow(p[2],2)*e32[2] - 24.*pow(p[1],2)*p[2]*e23[2] - 4.*pow(p[1],3)*e14[2] - pow(p[2],4)*e40[2] - 16.*p[1]*pow(p[2],3)*e31[2] - 36.*pow(p[1]*p[2],2)*e22[2] - 16.*pow(p[1],3)*p[2]*e13[2] - pow(p[1],4)*e04[2] - 4.*p[1]*pow(p[2],4)*e30[2] - 24.*pow(p[1],2)*pow(p[3],3)*e21[2] - 24.*pow(p[1],3)*pow(p[2],2)*e12[2] - 4.*pow(p[1],4)*p[2]*e03[2] - 6.*pow(p[1],2)*pow(p[2],4)*e20[2] - 16.*pow(p[1]*p[2],3)*e11[2] - 6.*pow(p[1],4)*pow(p[2],2)*e02[2] + 7.*pow(p[1]*p[2],4);
    m[19] = (1. - p[0])/2.*(e44[0] + e44[2]) + p[0]*e44[1];
    // y_1^3*y_w^5
    std::vector<double> e35(3);
    e35[0] = 45.*pow(p[4],4)*pow(p[3],2)*p[3]*p[4]*p[7] + 60.*pow(p[3]*p[4]*p[7],3)*pow(p[4],2) + 3.*p[1]*e25[0] + 5.*p[2]*e34[0] - 3.*pow(p[1],2)*e15[0] - 15.*p[1]*p[2]*e24[0] - 10.*pow(p[2],2)*e33[0] + pow(p[1],3)*e05[0] + 15.*p[2]*pow(p[1],2)*e14[0] + 30.*pow(p[2],2)*p[1]*e23[0] + 10.*pow(p[2],3)*e32[0] - 5.*p[2]*pow(p[1],3)*e04[0] - 3.*pow(p[1]*p[2],2)*e13[0] - 30.*pow(p[2],3)*p[1]*e22[0] - 5.*pow(p[2],4)*e31[0] + 10.*pow(p[2],2)*pow(p[1],3)*e03[0] + 30.*pow(p[2],3)*pow(p[1],2)*e12[0] + 15.*pow(p[2],4)*p[1]*e21[0] + pow(p[2],5)*e30[0] - 10.*pow(p[1]*p[2],3)*e02[0] - 15.*pow(p[2],4)*pow(p[1],2)*e11[0] - 3.*pow(p[2],5)*p[1]*e20[0] + 7.*pow(p[2],5)*pow(p[1],3);
    e35[1] = 45.*pow(p[6],4)*pow(p[5],2)*p[5]*p[6]*p[8] + 60.*pow(p[5]*p[6]*p[8],3)*pow(p[6],2);
    e35[2] = 45.*pow(p[4],4)*pow(p[3],2)*p[3]*p[4]*p[9] + 60.*pow(p[3]*p[4]*p[9],3)*pow(p[4],2) - 3.*p[1]*e25[2] - 5.*p[2]*e34[2] - 3.*pow(p[1],2)*e15[2] - 15.*p[1]*p[2]*e24[2] - 10.*pow(p[2],2)*e33[2] - pow(p[1],3)*e05[2] - 15.*p[2]*pow(p[1],2)*e14[2] - 30.*pow(p[2],2)*p[1]*e23[2] - 10.*pow(p[2],3)*e32[2] - 5.*p[2]*pow(p[1],3)*e04[2] - 3.*pow(p[1]*p[2],2)*e13[2] - 30.*pow(p[2],3)*p[1]*e22[2] - 5.*pow(p[2],4)*e31[2] - 10.*pow(p[2],2)*pow(p[1],3)*e03[2] - 30.*pow(p[2],3)*pow(p[1],2)*e12[2] - 15.*pow(p[2],4)*p[1]*e21[2] - pow(p[2],5)*e30[2] - 10.*pow(p[1]*p[2],3)*e02[2] - 15.*pow(p[2],4)*pow(p[1],2)*e11[2] - 3.*pow(p[2],5)*p[1]*e20[2] + 7.*pow(p[2],5)*pow(p[1],3);
    m[20] = (1. - p[0])/2.*(e35[0] + e35[2]) + p[0]*e35[1];

    return m;
}

void MomentEq::_setObjRange()
{
    _lower.resize(Common::NUM_OF_PARAM);
    _upper.resize(Common::NUM_OF_PARAM);
    _lower[0] = 0.1; _upper[0] = 0.8;   // a
    _lower[1] = -3.; _upper[1] = 3.;   // mu1
    _lower[2] = -7.; _upper[2] = 7.;   // mu2
    _lower[3] = 0.5; _upper[3] = 2.;  // sigma11
    _lower[4] = 0.3; _upper[4] = 2.;   // sigma12
    _lower[5] = 0.5; _upper[5] = 2.;  // sigma21
    _lower[6] = 0.3; _upper[6] = 2.;   // sigma22
    _lower[7] = -1.; _upper[7] = 1.;   // rho1
    _lower[8] = -1.; _upper[8] = 1.;   // rho2
    _lower[9] = -1.; _upper[9] = 1.;   // rho3
}

void MomentEq::setPrmdG(const std::vector<double> &p)
{
    _dG = p;
}

void MomentEq::setObjList(const std::vector<std::size_t> &p)
{
    _objList = p;
}

void MomentEq::setObjWeight(const std::vector< std::vector<double> > &p)
{
    _objWeight = p;
}

std::vector<double> MomentEq::getLowerObj()
{
    return _lower;
}

std::vector<double> MomentEq::getUpperObj()
{
    return _upper;
}

std::size_t MomentEq::getObjNum()
{
    return _objList.size();
}
